{
  "address": "0x3036A17DF2F870bCb628C25e66F61a8530CE91a8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract YellowClearingBase",
          "name": "nextImplementation",
          "type": "address"
        }
      ],
      "name": "NextImplementationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum YellowClearingBase.ParticipantStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "registrationTime",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct YellowClearingBase.ParticipantData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "ParticipantDataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "ParticipantMigratedFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ParticipantMigratedTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "ParticipantRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum YellowClearingBase.ParticipantStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "ParticipantStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PREVIOUS_IMPLEMENTATION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY_MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY_VALIDATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getIdentityPayload",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract YellowClearingBase",
              "name": "YellowClearing",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "participant",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct YellowClearingBase.IdentityPayload",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextImplementation",
      "outputs": [
        {
          "internalType": "contract YellowClearingBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "getParticipantData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum YellowClearingBase.ParticipantStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "registrationTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct YellowClearingBase.ParticipantData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "hasParticipant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "migrateParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum YellowClearingBase.ParticipantStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "registrationTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct YellowClearingBase.ParticipantData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "migrateParticipantData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "registerParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "reinstateParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "requireParticipantNotPresentBackwards",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "requireParticipantNotPresentForwards",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "requireParticipantNotPresentRecursive",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract YellowClearingBase",
          "name": "nextImplementation",
          "type": "address"
        }
      ],
      "name": "setNextImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum YellowClearingBase.ParticipantStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "registrationTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct YellowClearingBase.ParticipantData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "setParticipantData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "suspendParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        }
      ],
      "name": "validateParticipant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d435c0dae70b8a56fc7e5a2233e2e4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract YellowClearingBase\",\"name\":\"nextImplementation\",\"type\":\"address\"}],\"name\":\"NextImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum YellowClearingBase.ParticipantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"registrationTime\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct YellowClearingBase.ParticipantData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"ParticipantDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ParticipantMigratedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ParticipantMigratedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum YellowClearingBase.ParticipantStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ParticipantStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREVIOUS_IMPLEMENTATION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getIdentityPayload\",\"outputs\":[{\"components\":[{\"internalType\":\"contract YellowClearingBase\",\"name\":\"YellowClearing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct YellowClearingBase.IdentityPayload\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextImplementation\",\"outputs\":[{\"internalType\":\"contract YellowClearingBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"getParticipantData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum YellowClearingBase.ParticipantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"registrationTime\",\"type\":\"uint64\"}],\"internalType\":\"struct YellowClearingBase.ParticipantData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"hasParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"migrateParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum YellowClearingBase.ParticipantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"registrationTime\",\"type\":\"uint64\"}],\"internalType\":\"struct YellowClearingBase.ParticipantData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"migrateParticipantData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"registerParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"reinstateParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"requireParticipantNotPresentBackwards\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"requireParticipantNotPresentForwards\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"requireParticipantNotPresentRecursive\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YellowClearingBase\",\"name\":\"nextImplementation\",\"type\":\"address\"}],\"name\":\"setNextImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum YellowClearingBase.ParticipantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"registrationTime\",\"type\":\"uint64\"}],\"internalType\":\"struct YellowClearingBase.ParticipantData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"setParticipantData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"suspendParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"validateParticipant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation for the YellowClearing. Version 1.0.\",\"kind\":\"dev\",\"methods\":{\"getIdentityPayload(address)\":{\"details\":\"Return identity payload structure for a supplied participant. Used to ease interaction with this contract.\",\"params\":{\"participant\":\"Address of participant to get identity payload for.\"},\"returns\":{\"_0\":\"IdentityPayload Identity payload structure for a supplied participant.\"}},\"getNextImplementation()\":{\"details\":\"Get next implementation address if set, zero address if not.\",\"returns\":{\"_0\":\"YellowClearingBase Next implementation address if set, zero address if not.\"}},\"getParticipantData(address)\":{\"details\":\"Get participant data stored in the registry. Revert if participant is not present.\",\"params\":{\"participant\":\"Address of participant to get data about.\"},\"returns\":{\"_0\":\"ParticipantData Participant data.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasParticipant(address)\":{\"details\":\"Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`.\",\"returns\":{\"_0\":\"True if participant is present, false otherwise.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrateParticipant(address,bytes)\":{\"details\":\"NextImplementation must have been set. Participant must not have been migrated.\",\"params\":{\"participant\":\"Address of participant to migrate.\",\"signature\":\"Participant identity payload signed by that participant.\"}},\"migrateParticipantData(address,(uint8,uint64,uint64))\":{\"details\":\"Require PREVIOUS_IMPLEMENTATION_ROLE to invoke.\",\"params\":{\"data\":\"Participant data to migrate.\",\"participant\":\"Address of participant to migrate data of.\"}},\"registerParticipant(address,bytes)\":{\"details\":\"Participant must not be present in this or any previous or subsequent implementations.\",\"params\":{\"participant\":\"Virtual (no address, only public key exist) address of participant to add.\",\"signature\":\"Participant identity payload signed by this same participant.\"}},\"reinstateParticipant(address)\":{\"details\":\"Require AUDITOR_ROLE to invoke. Participant must have been suspended previously.\",\"params\":{\"participant\":\"Address of participant to reinstate.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"requireParticipantNotPresentBackwards(address)\":{\"details\":\"Recursively check that participant is not present in this registry and all previous ones.\",\"params\":{\"participant\":\"Address of participant to check.\"}},\"requireParticipantNotPresentForwards(address)\":{\"details\":\"Recursively check that participant is not present in this registry and all subsequent ones.\",\"params\":{\"participant\":\"Address of participant to check.\"}},\"requireParticipantNotPresentRecursive(address)\":{\"details\":\"Recursively check that participant is not present in this registry and all previous and subsequent ones.\",\"params\":{\"participant\":\"Address of participant to check.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setNextImplementation(address)\":{\"details\":\"Require REGISTRY_MAINTAINER_ROLE to be invoked. Require next implementation not to be already set. Require supplied next implementation contract to have granted this contract PREVIOUS_IMPLEMENTATION_ROLE.\",\"params\":{\"nextImplementation\":\"Next implementation address.\"}},\"setParticipantData(address,(uint8,uint64,uint64))\":{\"details\":\"Require REGISTRY_MAINTAINER_ROLE to invoke. Participant must not have been migrated.\",\"params\":{\"data\":\"Data to set.\",\"participant\":\"Address of participant to set data of.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"suspendParticipant(address)\":{\"details\":\"Require AUDITOR_ROLE to invoke. Participant must be present and not migrated\",\"params\":{\"participant\":\"Address of participant to suspend.\"}},\"validateParticipant(address)\":{\"details\":\"Require REGISTRY_VALIDATOR_ROLE to invoke. Participant must be present with Pending status.\",\"params\":{\"participant\":\"Address of participant to validate.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIdentityPayload(address)\":{\"notice\":\"Return identity payload structure for a supplied participant. Used to ease interaction with this contract.\"},\"getNextImplementation()\":{\"notice\":\"Get next implementation address if set, zero address if not.\"},\"getParticipantData(address)\":{\"notice\":\"Get participant data stored in the registry. Revert if participant is not present.\"},\"hasParticipant(address)\":{\"notice\":\"Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`.\"},\"migrateParticipant(address,bytes)\":{\"notice\":\"Migrate participant to the newest implementation present in upgrades chain. Emit `ParticipantMigratedFrom` and `ParticipantMigratedTo` events.\"},\"migrateParticipantData(address,(uint8,uint64,uint64))\":{\"notice\":\"Recursively migrate participant data to newest implementation in upgrades chain. Emit `ParticipantMigratedTo` event.\"},\"registerParticipant(address,bytes)\":{\"notice\":\"Register participant by adding it to the registry with Pending status. Emit `ParticipantRegistered` event.\"},\"reinstateParticipant(address)\":{\"notice\":\"Reinstate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event.\"},\"requireParticipantNotPresentBackwards(address)\":{\"notice\":\"Recursively check that participant is not present in this registry and all previous ones.\"},\"requireParticipantNotPresentForwards(address)\":{\"notice\":\"Recursively check that participant is not present in this registry and all subsequent ones.\"},\"requireParticipantNotPresentRecursive(address)\":{\"notice\":\"Recursively check that participant is not present in this registry and all previous and subsequent ones.\"},\"setNextImplementation(address)\":{\"notice\":\"Set next implementation address. Must not be zero address or self. Emit `NextImplementationSet` event.\"},\"setParticipantData(address,(uint8,uint64,uint64))\":{\"notice\":\"Set participant data to data supplied. Emit `ParticipantDataChanged` event.\"},\"suspendParticipant(address)\":{\"notice\":\"Suspend participant and set their status to Suspended. Emit `ParticipantStatusChanged` event.\"},\"validateParticipant(address)\":{\"notice\":\"Validate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/clearing/YellowClearingV1.sol\":\"YellowClearingV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/clearing/YellowClearingBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\n/**\\n * @notice Base contract for Yellow Clearing. Responsible for all operations regarding Yellow Network.\\n * @dev The actual implementation must derive from YellowClearingBase and can override `_migrateParticipantData` function.\\n */\\nabstract contract YellowClearingBase is AccessControl {\\n\\tusing ECDSA for bytes32;\\n\\n\\t// Participant status\\n\\tenum ParticipantStatus {\\n\\t\\t// Participant is not registered or have been removed\\n\\t\\tNone,\\n\\t\\t// Participant is registered but not yet validated\\n\\t\\tPending,\\n\\t\\t// Participant is registered but do not have token staked\\n\\t\\tInactive,\\n\\t\\t// Participant is registered and have token staked\\n\\t\\tActive,\\n\\t\\t// Participant is registered but is not allowed to participate\\n\\t\\tSuspended,\\n\\t\\t// Participant is registered but have migrated to the next implementation\\n\\t\\tMigrated\\n\\t}\\n\\n\\t// Participant data\\n\\tstruct ParticipantData {\\n\\t\\tParticipantStatus status;\\n\\t\\tuint64 nonce;\\n\\t\\tuint64 registrationTime;\\n\\t}\\n\\n\\t// Participant identity payload\\n\\tstruct IdentityPayload {\\n\\t\\tYellowClearingBase YellowClearing;\\n\\t\\taddress participant;\\n\\t\\tuint64 nonce;\\n\\t}\\n\\n\\t// Roles\\n\\tbytes32 public constant REGISTRY_MAINTAINER_ROLE = keccak256('REGISTRY_MAINTAINER_ROLE');\\n\\tbytes32 public constant REGISTRY_VALIDATOR_ROLE = keccak256('REGISTRY_VALIDATOR_ROLE');\\n\\tbytes32 public constant AUDITOR_ROLE = keccak256('AUDITOR_ROLE');\\n\\tbytes32 public constant PREVIOUS_IMPLEMENTATION_ROLE =\\n\\t\\tkeccak256('PREVIOUS_IMPLEMENTATION_ROLE');\\n\\n\\t// Participant data mapping\\n\\tmapping(address => ParticipantData) internal _participantData;\\n\\n\\t// Prev and next implementations\\n\\tYellowClearingBase private immutable _prevImplementation;\\n\\tYellowClearingBase private _nextImplementation;\\n\\n\\t// Address of this contract\\n\\taddress private immutable _self = address(this);\\n\\n\\t/**\\n\\t * @notice Grant DEFAULT_ADMIN_ROLE and REGISTRY_MAINTAINER_ROLE roles to deployer, link previous implementation it supplied.\\n\\t *\\n\\t */\\n\\tconstructor(YellowClearingBase previousImplementation) {\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_grantRole(REGISTRY_MAINTAINER_ROLE, msg.sender);\\n\\n\\t\\t_prevImplementation = previousImplementation;\\n\\n\\t\\tif (address(_prevImplementation) != address(0)) {\\n\\t\\t\\t_grantRole(PREVIOUS_IMPLEMENTATION_ROLE, address(_prevImplementation));\\n\\t\\t}\\n\\t}\\n\\n\\t// ======================\\n\\t// Next Implementation\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Get next implementation address if set, zero address if not.\\n\\t * @dev Get next implementation address if set, zero address if not.\\n\\t * @return YellowClearingBase Next implementation address if set, zero address if not.\\n\\t */\\n\\tfunction getNextImplementation() external view returns (YellowClearingBase) {\\n\\t\\treturn _nextImplementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set next implementation address. Must not be zero address or self. Emit `NextImplementationSet` event.\\n\\t * @dev Require REGISTRY_MAINTAINER_ROLE to be invoked. Require next implementation not to be already set. Require supplied next implementation contract to have granted this contract PREVIOUS_IMPLEMENTATION_ROLE.\\n\\t * @param nextImplementation Next implementation address.\\n\\t */\\n\\tfunction setNextImplementation(YellowClearingBase nextImplementation)\\n\\t\\texternal\\n\\t\\tonlyRole(REGISTRY_MAINTAINER_ROLE)\\n\\t{\\n\\t\\trequire(address(_nextImplementation) == address(0), 'Next implementation already set');\\n\\t\\trequire(\\n\\t\\t\\taddress(nextImplementation) != address(0) && address(nextImplementation) != _self,\\n\\t\\t\\t'Invalid nextImplementation supplied'\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tnextImplementation.hasRole(PREVIOUS_IMPLEMENTATION_ROLE, address(this)),\\n\\t\\t\\t'Previous implementation role is required'\\n\\t\\t);\\n\\n\\t\\t_nextImplementation = nextImplementation;\\n\\n\\t\\temit NextImplementationSet(nextImplementation);\\n\\t}\\n\\n\\t// ======================\\n\\t// participant checks\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`.\\n\\t * @dev Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`.\\n\\t * @return True if participant is present, false otherwise.\\n\\t */\\n\\tfunction hasParticipant(address participant) public view returns (bool) {\\n\\t\\treturn _participantData[participant].status != ParticipantStatus.None;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recursively check that participant is not present in this registry and all previous ones.\\n\\t * @dev Recursively check that participant is not present in this registry and all previous ones.\\n\\t * @param participant Address of participant to check.\\n\\t */\\n\\tfunction requireParticipantNotPresentBackwards(address participant) public view {\\n\\t\\tif (address(_prevImplementation) != address(0)) {\\n\\t\\t\\t_prevImplementation.requireParticipantNotPresentBackwards(participant);\\n\\t\\t}\\n\\n\\t\\t_requireParticipantNotPresent(participant);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recursively check that participant is not present in this registry and all subsequent ones.\\n\\t * @dev Recursively check that participant is not present in this registry and all subsequent ones.\\n\\t * @param participant Address of participant to check.\\n\\t */\\n\\tfunction requireParticipantNotPresentForwards(address participant) public view {\\n\\t\\tif (address(_nextImplementation) != address(0)) {\\n\\t\\t\\t_nextImplementation.requireParticipantNotPresentForwards(participant);\\n\\t\\t}\\n\\n\\t\\t_requireParticipantNotPresent(participant);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recursively check that participant is not present in this registry and all previous and subsequent ones.\\n\\t * @dev Recursively check that participant is not present in this registry and all previous and subsequent ones.\\n\\t * @param participant Address of participant to check.\\n\\t */\\n\\tfunction requireParticipantNotPresentRecursive(address participant) public view {\\n\\t\\trequireParticipantNotPresentBackwards(participant);\\n\\t\\trequireParticipantNotPresentForwards(participant);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get participant data stored in the registry. Revert if participant is not present.\\n\\t * @dev Get participant data stored in the registry. Revert if participant is not present.\\n\\t * @param participant Address of participant to get data about.\\n\\t * @return ParticipantData Participant data.\\n\\t */\\n\\tfunction getParticipantData(address participant)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (ParticipantData memory)\\n\\t{\\n\\t\\t_requireParticipantPresent(participant);\\n\\n\\t\\treturn _participantData[participant];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return identity payload structure for a supplied participant. Used to ease interaction with this contract.\\n\\t * @dev Return identity payload structure for a supplied participant. Used to ease interaction with this contract.\\n\\t * @param participant Address of participant to get identity payload for.\\n\\t * @return IdentityPayload Identity payload structure for a supplied participant.\\n\\t */\\n\\tfunction getIdentityPayload(address participant) public view returns (IdentityPayload memory) {\\n\\t\\tuint64 nonce;\\n\\n\\t\\tif (!hasParticipant(participant)) {\\n\\t\\t\\tnonce = 0;\\n\\t\\t} else {\\n\\t\\t\\tnonce = _participantData[participant].nonce + 1;\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tIdentityPayload({\\n\\t\\t\\t\\tYellowClearing: YellowClearingBase(_self),\\n\\t\\t\\t\\tparticipant: participant,\\n\\t\\t\\t\\tnonce: nonce\\n\\t\\t\\t});\\n\\t}\\n\\n\\t// ======================\\n\\t// participant changes\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Register participant by adding it to the registry with Pending status. Emit `ParticipantRegistered` event.\\n\\t * @dev Participant must not be present in this or any previous or subsequent implementations.\\n\\t * @param participant Virtual (no address, only public key exist) address of participant to add.\\n\\t * @param signature Participant identity payload signed by this same participant.\\n\\t */\\n\\tfunction registerParticipant(address participant, bytes calldata signature) external {\\n\\t\\trequireParticipantNotPresentRecursive(participant);\\n\\n\\t\\tIdentityPayload memory identityPayload = getIdentityPayload(participant);\\n\\n\\t\\trequire(\\n\\t\\t\\t_recoverIdentitySigner(identityPayload, signature) == participant,\\n\\t\\t\\t'Invalid signer'\\n\\t\\t);\\n\\n\\t\\t_participantData[participant] = ParticipantData({\\n\\t\\t\\tstatus: ParticipantStatus.Pending,\\n\\t\\t\\tnonce: identityPayload.nonce,\\n\\t\\t\\tregistrationTime: uint64(block.timestamp)\\n\\t\\t});\\n\\n\\t\\temit ParticipantRegistered(participant);\\n\\t}\\n\\n\\t// REVIEW: change docs comment after checks are added\\n\\t/**\\n\\t * @notice Validate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event.\\n\\t * @dev Require REGISTRY_VALIDATOR_ROLE to invoke. Participant must be present with Pending status.\\n\\t * @param participant Address of participant to validate.\\n\\t */\\n\\tfunction validateParticipant(address participant) external onlyRole(REGISTRY_VALIDATOR_ROLE) {\\n\\t\\t_requireParticipantPresent(participant);\\n\\t\\trequire(\\n\\t\\t\\t_participantData[participant].status == ParticipantStatus.Pending,\\n\\t\\t\\t'Invalid status'\\n\\t\\t);\\n\\n\\t\\t// status changes to either Active or Inactive depending on internal logic yet to be added\\n\\t\\t_participantData[participant].status = ParticipantStatus.Active;\\n\\n\\t\\temit ParticipantStatusChanged(participant, ParticipantStatus.Active);\\n\\t}\\n\\n\\t// REVIEW: change docs comment after checks are added\\n\\t/**\\n\\t * @notice Suspend participant and set their status to Suspended. Emit `ParticipantStatusChanged` event.\\n\\t * @dev Require AUDITOR_ROLE to invoke. Participant must be present and not migrated\\n\\t * @param participant Address of participant to suspend.\\n\\t */\\n\\tfunction suspendParticipant(address participant) external onlyRole(AUDITOR_ROLE) {\\n\\t\\t_requireParticipantPresent(participant);\\n\\n\\t\\tParticipantStatus status = _participantData[participant].status;\\n\\t\\trequire(\\n\\t\\t\\tstatus != ParticipantStatus.None &&\\n\\t\\t\\t\\tstatus != ParticipantStatus.Suspended &&\\n\\t\\t\\t\\tstatus != ParticipantStatus.Migrated,\\n\\t\\t\\t'Invalid status'\\n\\t\\t);\\n\\n\\t\\t_participantData[participant].status = ParticipantStatus.Suspended;\\n\\n\\t\\temit ParticipantStatusChanged(participant, ParticipantStatus.Suspended);\\n\\t}\\n\\n\\t// REVIEW: change docs comment after checks are added\\n\\t/**\\n\\t * @notice Reinstate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event.\\n\\t * @dev Require AUDITOR_ROLE to invoke. Participant must have been suspended previously.\\n\\t * @param participant Address of participant to reinstate.\\n\\t */\\n\\tfunction reinstateParticipant(address participant) external onlyRole(AUDITOR_ROLE) {\\n\\t\\t_requireParticipantPresent(participant);\\n\\t\\trequire(\\n\\t\\t\\t_participantData[participant].status == ParticipantStatus.Suspended,\\n\\t\\t\\t'Invalid status'\\n\\t\\t);\\n\\n\\t\\t// status changes to either Active or Inactive depending on internal logic yet to be added\\n\\t\\t_participantData[participant].status = ParticipantStatus.Active;\\n\\n\\t\\temit ParticipantStatusChanged(participant, ParticipantStatus.Active);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set participant data to data supplied. Emit `ParticipantDataChanged` event.\\n\\t * @dev Require REGISTRY_MAINTAINER_ROLE to invoke. Participant must not have been migrated.\\n\\t * @param participant Address of participant to set data of.\\n\\t * @param data Data to set.\\n\\t */\\n\\tfunction setParticipantData(address participant, ParticipantData memory data)\\n\\t\\texternal\\n\\t\\tonlyRole(REGISTRY_MAINTAINER_ROLE)\\n\\t{\\n\\t\\trequire(participant != address(0), 'Invalid participant address');\\n\\n\\t\\trequire(\\n\\t\\t\\t_participantData[participant].status != ParticipantStatus.Migrated,\\n\\t\\t\\t'Participant already migrated'\\n\\t\\t);\\n\\n\\t\\t_participantData[participant] = data;\\n\\n\\t\\temit ParticipantDataSet(participant, data);\\n\\t}\\n\\n\\t// ======================\\n\\t// migrate participant\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Migrate participant to the newest implementation present in upgrades chain. Emit `ParticipantMigratedFrom` and `ParticipantMigratedTo` events.\\n\\t * @dev NextImplementation must have been set. Participant must not have been migrated.\\n\\t * @param participant Address of participant to migrate.\\n\\t * @param signature Participant identity payload signed by that participant.\\n\\t */\\n\\tfunction migrateParticipant(address participant, bytes calldata signature) external {\\n\\t\\trequire(address(_nextImplementation) != address(0), 'Next implementation is not set');\\n\\n\\t\\t_requireParticipantPresent(participant);\\n\\n\\t\\tIdentityPayload memory identityPayload = getIdentityPayload(participant);\\n\\n\\t\\trequire(\\n\\t\\t\\t_recoverIdentitySigner(identityPayload, signature) == participant,\\n\\t\\t\\t'Invalid signer'\\n\\t\\t);\\n\\n\\t\\t// Get previous participant data\\n\\t\\tParticipantData memory currentData = _participantData[participant];\\n\\t\\trequire(currentData.status != ParticipantStatus.Migrated, 'Participant already migrated');\\n\\n\\t\\t// Update data to resemble migration\\n\\t\\tParticipantData memory updatedData = currentData;\\n\\t\\tupdatedData.nonce = identityPayload.nonce;\\n\\n\\t\\t// Migrate data, emit ParticipantMigratedTo\\n\\t\\t_nextImplementation.migrateParticipantData(participant, updatedData);\\n\\n\\t\\t// Mark participant as migrated on this implementation\\n\\t\\t_participantData[participant] = ParticipantData({\\n\\t\\t\\tstatus: ParticipantStatus.Migrated,\\n\\t\\t\\tnonce: updatedData.nonce,\\n\\t\\t\\tregistrationTime: updatedData.registrationTime\\n\\t\\t});\\n\\n\\t\\t// Emit event\\n\\t\\temit ParticipantMigratedFrom(participant, _self);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recursively migrate participant data to newest implementation in upgrades chain. Emit `ParticipantMigratedTo` event.\\n\\t * @dev Require PREVIOUS_IMPLEMENTATION_ROLE to invoke.\\n\\t * @param participant Address of participant to migrate data of.\\n\\t * @param data Participant data to migrate.\\n\\t */\\n\\tfunction migrateParticipantData(address participant, ParticipantData memory data)\\n\\t\\texternal\\n\\t\\tonlyRole(PREVIOUS_IMPLEMENTATION_ROLE)\\n\\t{\\n\\t\\tif (address(_nextImplementation) != address(0)) {\\n\\t\\t\\t_nextImplementation.migrateParticipantData(participant, data);\\n\\t\\t} else {\\n\\t\\t\\t_migrateParticipantData(participant, data);\\n\\n\\t\\t\\temit ParticipantMigratedTo(participant, _self);\\n\\t\\t}\\n\\t}\\n\\n\\t// ======================\\n\\t// internal functions\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Require participant it present in this registry.\\n\\t * @dev Require participant it present in this registry.\\n\\t * @param participant Address of participant to check.\\n\\t */\\n\\tfunction _requireParticipantPresent(address participant) internal view {\\n\\t\\trequire(hasParticipant(participant), 'Participant does not exist');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Require participant it not present in this registry.\\n\\t * @dev Require participant it not present in this registry.\\n\\t * @param participant Address of participant to check.\\n\\t */\\n\\tfunction _requireParticipantNotPresent(address participant) internal view {\\n\\t\\trequire(!hasParticipant(participant), 'Participant already exist');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recover signer of identity payload.\\n\\t * @dev Recover signer of identity payload.\\n\\t * @param identityPayload Identity payload that has been signed.\\n\\t * @param signature Signed identity payload.\\n\\t * @return address Address of the signer.\\n\\t */\\n\\tfunction _recoverIdentitySigner(IdentityPayload memory identityPayload, bytes memory signature)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address)\\n\\t{\\n\\t\\treturn keccak256(abi.encode(identityPayload)).toEthSignedMessageHash().recover(signature);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Internal logic of migrating participant data. Can be overridden to change.\\n\\t * @dev Internal logic of migrating participant data. Can be overridden to change.\\n\\t * @param participant Address of participant to migrate data of.\\n\\t * @param data Participant data to migrate.\\n\\t */\\n\\tfunction _migrateParticipantData(address participant, ParticipantData memory data)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_participantData[participant] = data;\\n\\t}\\n\\n\\tevent NextImplementationSet(YellowClearingBase nextImplementation);\\n\\n\\tevent ParticipantRegistered(address participant);\\n\\n\\tevent ParticipantStatusChanged(address indexed participant, ParticipantStatus indexed status);\\n\\n\\tevent ParticipantDataSet(address indexed participant, ParticipantData data);\\n\\n\\tevent ParticipantMigratedFrom(address indexed participant, address indexed from);\\n\\n\\tevent ParticipantMigratedTo(address indexed participant, address indexed to);\\n}\\n\",\"keccak256\":\"0x45fb4f83e8c7f6c540191ecba2bd6b3569d8259a44ab244c32473d0f1655f336\",\"license\":\"MIT\"},\"contracts/clearing/YellowClearingV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport './YellowClearingBase.sol';\\n\\n/**\\n * @dev Implementation for the YellowClearing. Version 1.0.\\n */\\ncontract YellowClearingV1 is YellowClearingBase(YellowClearingBase(address(0))) {\\n\\n}\\n\",\"keccak256\":\"0xbbb0235e6925cab73bf6393baa0d41340e7458b28bbe030e940786b0a6b3318b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523060a0523480156200001557600080fd5b506000620000248133620000a0565b620000507fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e633620000a0565b6001600160a01b0381166080819052156200009957620000997fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd608051620000a060201b60201c565b5062000141565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200013d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000fc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60805160a05161214f620001836000396000818161098701528181610e7b0152818161124c01526114710152600081816106360152610682015261214f6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80635c47ead7116100de578063add474da11610097578063d547741f11610071578063d547741f146103c4578063ed824b84146103d7578063ef0be039146103ea578063fafb1581146103fd57600080fd5b8063add474da14610377578063b927371f1461038a578063d2cebe781461039d57600080fd5b80635c47ead7146102db5780636e1d616e146102fb57806391d1485414610322578063a217fddf14610335578063a57ff12b1461033d578063a82f4b031461035057600080fd5b80632c267a4f1161014b57806331bd679f1161012557806331bd679f1461028757806336568abe1461029a5780633a718921146102ad5780633ddab058146102c857600080fd5b80632c267a4f1461023a5780632dcde8bb146102615780632f2ff15d1461027457600080fd5b806301ffc9a71461019357806304721344146101bb57806313aa3273146101d05780631854708a146101e35780632270d8ed146101f6578063248a9ca314610209575b600080fd5b6101a66101a1366004611ccd565b61041d565b60405190151581526020015b60405180910390f35b6101ce6101c9366004611d3e565b610454565b005b6101ce6101de366004611de6565b61061f565b6101ce6101f1366004611de6565b610634565b6101ce610204366004611de6565b6106e7565b61022c610217366004611e03565b60009081526020819052604090206001015490565b6040519081526020016101b2565b61022c7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e681565b6101ce61026f366004611e1c565b61072a565b6101ce610282366004611ea0565b6108c5565b6101ce610295366004611de6565b6108ef565b6101ce6102a8366004611ea0565b610b54565b6002546040516001600160a01b0390911681526020016101b2565b6101ce6102d6366004611de6565b610bd2565b6102ee6102e9366004611de6565b610d03565b6040516101b29190611f2c565b61022c7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f581565b6101a6610330366004611ea0565b610da2565b61022c600081565b6101ce61034b366004611d3e565b610dcb565b61022c7fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd81565b6101a6610385366004611de6565b610ede565b6101ce610398366004611e1c565b610f16565b61022c7fbbde2da0ccd8bea978c1302dddf5d8b522b584b91c1e6ec4366bf503d383f46b81565b6101ce6103d2366004611ea0565b6112a0565b6101ce6103e5366004611de6565b6112c5565b6101ce6103f8366004611de6565b6113b9565b61041061040b366004611de6565b6113f3565b6040516101b29190611f3a565b60006001600160e01b03198216637965db0b60e01b148061044e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e661047e816114b0565b6001600160a01b0383166104d95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207061727469636970616e742061646472657373000000000060448201526064015b60405180910390fd5b60056001600160a01b03841660009081526001602052604090205460ff16600581111561050857610508611ed0565b036105555760405162461bcd60e51b815260206004820152601c60248201527f5061727469636970616e7420616c7265616479206d696772617465640000000060448201526064016104d0565b6001600160a01b0383166000908152600160208190526040909120835181548593839160ff19169083600581111561058f5761058f611ed0565b0217905550602082015181546040938401516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b031990911617179055516001600160a01b038416907f7163a319e1d0de86075a48da6389232757827e2fa4a6c36b45b54bc2c39c5a2090610612908590611f2c565b60405180910390a2505050565b61062881610634565b610631816106e7565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156106de57604051630c2a384560e11b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690631854708a906024015b60006040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050505b610631816114ba565b6002546001600160a01b0316156106de57600254604051632270d8ed60e01b81526001600160a01b03838116600483015290911690632270d8ed906024016106ad565b6107338361061f565b600061073e846113f3565b9050836001600160a01b031661078a8285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061151092505050565b6001600160a01b0316146107d15760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064016104d0565b604080516060810182526001808252838301516001600160401b0390811660208085019190915242909116838501526001600160a01b0388166000908152908290529290922081518154929391929091839160ff19169083600581111561083a5761083a611ed0565b021790555060208281015182546040948501516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b0319909116171790915590516001600160a01b03861681527fe11711cd714e06fbbbea301a8e90822f2f2ea4808e37e3adf06038f33c53ff27910160405180910390a150505050565b6000828152602081905260409020600101546108e0816114b0565b6108ea8383611597565b505050565b7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e6610919816114b0565b6002546001600160a01b0316156109725760405162461bcd60e51b815260206004820152601f60248201527f4e65787420696d706c656d656e746174696f6e20616c7265616479207365740060448201526064016104d0565b6001600160a01b038216158015906109bc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610a145760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206e657874496d706c656d656e746174696f6e20737570706c6044820152621a595960ea1b60648201526084016104d0565b604051632474521560e21b81527fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd60048201523060248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190611f72565b610aff5760405162461bcd60e51b815260206004820152602860248201527f50726576696f757320696d706c656d656e746174696f6e20726f6c65206973206044820152671c995c5d5a5c995960c21b60648201526084016104d0565b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527fd29e16348a743868e0d8abbe198181558821118e9ffd596ad33d0e54899b6f019060200160405180910390a15050565b6001600160a01b0381163314610bc45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104d0565b610bce828261161b565b5050565b7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5610bfc816114b0565b610c0582611680565b6001600160a01b03821660009081526001602052604081205460ff1690816005811115610c3457610c34611ed0565b14158015610c5457506004816005811115610c5157610c51611ed0565b14155b8015610c7257506005816005811115610c6f57610c6f611ed0565b14155b610caf5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b60448201526064016104d0565b6001600160a01b038316600081815260016020526040808220805460ff1916600490811790915590519092917f7c08542390a40cf3a63e55f43e29fd8cae8236fb659dd7591f4e436b85150b7f91a3505050565b6040805160608101825260008082526020820181905291810191909152610d2982611680565b6001600160a01b038216600090815260016020526040908190208151606081019092528054829060ff166005811115610d6457610d64611ed0565b6005811115610d7557610d75611ed0565b815290546001600160401b03610100820481166020840152600160481b9091041660409091015292915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd610df5816114b0565b6002546001600160a01b031615610e6f5760025460405163a57ff12b60e01b81526001600160a01b039091169063a57ff12b90610e389086908690600401611f94565b600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b50505050505050565b610e7983836116d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03167f4052c6dc5d3b3c3a2157e0e6c690c5b147aa5993712cb410bec0f735b0835eb460405160405180910390a3505050565b6000806001600160a01b03831660009081526001602052604090205460ff166005811115610f0e57610f0e611ed0565b141592915050565b6002546001600160a01b0316610f6e5760405162461bcd60e51b815260206004820152601e60248201527f4e65787420696d706c656d656e746174696f6e206973206e6f7420736574000060448201526064016104d0565b610f7783611680565b6000610f82846113f3565b9050836001600160a01b0316610fce8285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061151092505050565b6001600160a01b0316146110155760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064016104d0565b6001600160a01b0384166000908152600160205260408082208151606081019092528054829060ff16600581111561104f5761104f611ed0565b600581111561106057611060611ed0565b815290546001600160401b03610100820481166020840152600160481b90910416604090910152905060058151600581111561109e5761109e611ed0565b036110eb5760405162461bcd60e51b815260206004820152601c60248201527f5061727469636970616e7420616c7265616479206d696772617465640000000060448201526064016104d0565b6040808301516001600160401b03166020830152600254905163a57ff12b60e01b815282916001600160a01b03169063a57ff12b906111309089908590600401611f94565b600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b50505050604051806060016040528060058081111561117f5761117f611ed0565b815260200182602001516001600160401b0316815260200182604001516001600160401b031681525060016000886001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff021916908360058111156111f7576111f7611ed0565b0217905550602082015181546040938401516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b031990911617179055516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691908816907f3eb28b1f22808b37a3272465ff69d98b0390939c8fe3674a2ed7ee4c8830b29b90600090a3505050505050565b6000828152602081905260409020600101546112bb816114b0565b6108ea838361161b565b7fbbde2da0ccd8bea978c1302dddf5d8b522b584b91c1e6ec4366bf503d383f46b6112ef816114b0565b6112f882611680565b60015b6001600160a01b03831660009081526001602052604090205460ff16600581111561132857611328611ed0565b146113665760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b60448201526064016104d0565b6001600160a01b038216600081815260016020526040808220805460ff1916600390811790915590519092917f7c08542390a40cf3a63e55f43e29fd8cae8236fb659dd7591f4e436b85150b7f91a35050565b7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f56113e3816114b0565b6113ec82611680565b60046112fb565b604080516060810182526000808252602082018190529181018290529061141983610ede565b6114255750600061145d565b6001600160a01b03831660009081526001602081905260409091205461145a916101009091046001600160401b031690611fc7565b90505b604080516060810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682529490941660208501526001600160401b03909116908301525090565b6106318133611760565b6114c381610ede565b156106315760405162461bcd60e51b815260206004820152601960248201527f5061727469636970616e7420616c72656164792065786973740000000000000060448201526064016104d0565b60006115908261158a8560405160200161152a9190611f3a565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b906117c4565b9392505050565b6115a18282610da2565b610bce576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116258282610da2565b15610bce576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61168981610ede565b6106315760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e7420646f6573206e6f7420657869737400000000000060448201526064016104d0565b6001600160a01b0382166000908152600160208190526040909120825181548493839160ff19169083600581111561170f5761170f611ed0565b021790555060208201518154604090930151610100600160881b03199093166101006001600160401b039283160267ffffffffffffffff60481b191617600160481b91909316029190911790555050565b61176a8282610da2565b610bce57611782816001600160a01b031660146117e8565b61178d8360206117e8565b60405160200161179e929190612012565b60408051601f198184030181529082905262461bcd60e51b82526104d091600401612087565b60008060006117d38585611983565b915091506117e0816119f1565b509392505050565b606060006117f78360026120ba565b6118029060026120d9565b6001600160401b0381111561181957611819611d0c565b6040519080825280601f01601f191660200182016040528015611843576020820181803683370190505b509050600360fc1b8160008151811061185e5761185e6120ec565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061188d5761188d6120ec565b60200101906001600160f81b031916908160001a90535060006118b18460026120ba565b6118bc9060016120d9565b90505b6001811115611934576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118f0576118f06120ec565b1a60f81b828281518110611906576119066120ec565b60200101906001600160f81b031916908160001a90535060049490941c9361192d81612102565b90506118bf565b5083156115905760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104d0565b60008082516041036119b95760208301516040840151606085015160001a6119ad87828585611ba7565b945094505050506119ea565b82516040036119e257602083015160408401516119d7868383611c94565b9350935050506119ea565b506000905060025b9250929050565b6000816004811115611a0557611a05611ed0565b03611a0d5750565b6001816004811115611a2157611a21611ed0565b03611a6e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d0565b6002816004811115611a8257611a82611ed0565b03611acf5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d0565b6003816004811115611ae357611ae3611ed0565b03611b3b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104d0565b6004816004811115611b4f57611b4f611ed0565b036106315760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104d0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611bde5750600090506003611c8b565b8460ff16601b14158015611bf657508460ff16601c14155b15611c075750600090506004611c8b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c5b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c8457600060019250925050611c8b565b9150600090505b94509492505050565b6000806001600160ff1b03831681611cb160ff86901c601b6120d9565b9050611cbf87828885611ba7565b935093505050935093915050565b600060208284031215611cdf57600080fd5b81356001600160e01b03198116811461159057600080fd5b6001600160a01b038116811461063157600080fd5b634e487b7160e01b600052604160045260246000fd5b80356001600160401b0381168114611d3957600080fd5b919050565b6000808284036080811215611d5257600080fd5b8335611d5d81611cf7565b92506060601f1982011215611d7157600080fd5b50604051606081018181106001600160401b0382111715611da257634e487b7160e01b600052604160045260246000fd5b604052602084013560068110611db757600080fd5b8152611dc560408501611d22565b6020820152611dd660608501611d22565b6040820152809150509250929050565b600060208284031215611df857600080fd5b813561159081611cf7565b600060208284031215611e1557600080fd5b5035919050565b600080600060408486031215611e3157600080fd5b8335611e3c81611cf7565b925060208401356001600160401b0380821115611e5857600080fd5b818601915086601f830112611e6c57600080fd5b813581811115611e7b57600080fd5b876020828501011115611e8d57600080fd5b6020830194508093505050509250925092565b60008060408385031215611eb357600080fd5b823591506020830135611ec581611cf7565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b805160068110611f0657634e487b7160e01b600052602160045260246000fd5b82526020818101516001600160401b039081169184019190915260409182015116910152565b6060810161044e8284611ee6565b81516001600160a01b039081168252602080840151909116908201526040918201516001600160401b03169181019190915260600190565b600060208284031215611f8457600080fd5b8151801515811461159057600080fd5b6001600160a01b0383168152608081016115906020830184611ee6565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115611fe757611fe7611fb1565b5092915050565b60005b83811015612009578181015183820152602001611ff1565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161204a816017850160208801611fee565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161207b816028840160208801611fee565b01602801949350505050565b60208152600082518060208401526120a6816040850160208701611fee565b601f01601f19169190910160400192915050565b60008160001904831182151516156120d4576120d4611fb1565b500290565b8082018082111561044e5761044e611fb1565b634e487b7160e01b600052603260045260246000fd5b60008161211157612111611fb1565b50600019019056fea2646970667358221220e4319ffce348a3a6f2f1c51c087632ea34316a907b62d05e4cd9c9abd876311c64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80635c47ead7116100de578063add474da11610097578063d547741f11610071578063d547741f146103c4578063ed824b84146103d7578063ef0be039146103ea578063fafb1581146103fd57600080fd5b8063add474da14610377578063b927371f1461038a578063d2cebe781461039d57600080fd5b80635c47ead7146102db5780636e1d616e146102fb57806391d1485414610322578063a217fddf14610335578063a57ff12b1461033d578063a82f4b031461035057600080fd5b80632c267a4f1161014b57806331bd679f1161012557806331bd679f1461028757806336568abe1461029a5780633a718921146102ad5780633ddab058146102c857600080fd5b80632c267a4f1461023a5780632dcde8bb146102615780632f2ff15d1461027457600080fd5b806301ffc9a71461019357806304721344146101bb57806313aa3273146101d05780631854708a146101e35780632270d8ed146101f6578063248a9ca314610209575b600080fd5b6101a66101a1366004611ccd565b61041d565b60405190151581526020015b60405180910390f35b6101ce6101c9366004611d3e565b610454565b005b6101ce6101de366004611de6565b61061f565b6101ce6101f1366004611de6565b610634565b6101ce610204366004611de6565b6106e7565b61022c610217366004611e03565b60009081526020819052604090206001015490565b6040519081526020016101b2565b61022c7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e681565b6101ce61026f366004611e1c565b61072a565b6101ce610282366004611ea0565b6108c5565b6101ce610295366004611de6565b6108ef565b6101ce6102a8366004611ea0565b610b54565b6002546040516001600160a01b0390911681526020016101b2565b6101ce6102d6366004611de6565b610bd2565b6102ee6102e9366004611de6565b610d03565b6040516101b29190611f2c565b61022c7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f581565b6101a6610330366004611ea0565b610da2565b61022c600081565b6101ce61034b366004611d3e565b610dcb565b61022c7fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd81565b6101a6610385366004611de6565b610ede565b6101ce610398366004611e1c565b610f16565b61022c7fbbde2da0ccd8bea978c1302dddf5d8b522b584b91c1e6ec4366bf503d383f46b81565b6101ce6103d2366004611ea0565b6112a0565b6101ce6103e5366004611de6565b6112c5565b6101ce6103f8366004611de6565b6113b9565b61041061040b366004611de6565b6113f3565b6040516101b29190611f3a565b60006001600160e01b03198216637965db0b60e01b148061044e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e661047e816114b0565b6001600160a01b0383166104d95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207061727469636970616e742061646472657373000000000060448201526064015b60405180910390fd5b60056001600160a01b03841660009081526001602052604090205460ff16600581111561050857610508611ed0565b036105555760405162461bcd60e51b815260206004820152601c60248201527f5061727469636970616e7420616c7265616479206d696772617465640000000060448201526064016104d0565b6001600160a01b0383166000908152600160208190526040909120835181548593839160ff19169083600581111561058f5761058f611ed0565b0217905550602082015181546040938401516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b031990911617179055516001600160a01b038416907f7163a319e1d0de86075a48da6389232757827e2fa4a6c36b45b54bc2c39c5a2090610612908590611f2c565b60405180910390a2505050565b61062881610634565b610631816106e7565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156106de57604051630c2a384560e11b81526001600160a01b0382811660048301527f00000000000000000000000000000000000000000000000000000000000000001690631854708a906024015b60006040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050505b610631816114ba565b6002546001600160a01b0316156106de57600254604051632270d8ed60e01b81526001600160a01b03838116600483015290911690632270d8ed906024016106ad565b6107338361061f565b600061073e846113f3565b9050836001600160a01b031661078a8285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061151092505050565b6001600160a01b0316146107d15760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064016104d0565b604080516060810182526001808252838301516001600160401b0390811660208085019190915242909116838501526001600160a01b0388166000908152908290529290922081518154929391929091839160ff19169083600581111561083a5761083a611ed0565b021790555060208281015182546040948501516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b0319909116171790915590516001600160a01b03861681527fe11711cd714e06fbbbea301a8e90822f2f2ea4808e37e3adf06038f33c53ff27910160405180910390a150505050565b6000828152602081905260409020600101546108e0816114b0565b6108ea8383611597565b505050565b7fecbc78d0ebbbe48f46082ba4583144b1e837e371afe5f7541dd384b2420188e6610919816114b0565b6002546001600160a01b0316156109725760405162461bcd60e51b815260206004820152601f60248201527f4e65787420696d706c656d656e746174696f6e20616c7265616479207365740060448201526064016104d0565b6001600160a01b038216158015906109bc57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610a145760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206e657874496d706c656d656e746174696f6e20737570706c6044820152621a595960ea1b60648201526084016104d0565b604051632474521560e21b81527fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd60048201523060248201526001600160a01b038316906391d1485490604401602060405180830381865afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190611f72565b610aff5760405162461bcd60e51b815260206004820152602860248201527f50726576696f757320696d706c656d656e746174696f6e20726f6c65206973206044820152671c995c5d5a5c995960c21b60648201526084016104d0565b600280546001600160a01b0319166001600160a01b0384169081179091556040519081527fd29e16348a743868e0d8abbe198181558821118e9ffd596ad33d0e54899b6f019060200160405180910390a15050565b6001600160a01b0381163314610bc45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104d0565b610bce828261161b565b5050565b7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5610bfc816114b0565b610c0582611680565b6001600160a01b03821660009081526001602052604081205460ff1690816005811115610c3457610c34611ed0565b14158015610c5457506004816005811115610c5157610c51611ed0565b14155b8015610c7257506005816005811115610c6f57610c6f611ed0565b14155b610caf5760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b60448201526064016104d0565b6001600160a01b038316600081815260016020526040808220805460ff1916600490811790915590519092917f7c08542390a40cf3a63e55f43e29fd8cae8236fb659dd7591f4e436b85150b7f91a3505050565b6040805160608101825260008082526020820181905291810191909152610d2982611680565b6001600160a01b038216600090815260016020526040908190208151606081019092528054829060ff166005811115610d6457610d64611ed0565b6005811115610d7557610d75611ed0565b815290546001600160401b03610100820481166020840152600160481b9091041660409091015292915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7fe51d637fe1062d0b2d4e6d9a9081edf0a94960a52d0dcedab6d525c0b5b998fd610df5816114b0565b6002546001600160a01b031615610e6f5760025460405163a57ff12b60e01b81526001600160a01b039091169063a57ff12b90610e389086908690600401611f94565b600060405180830381600087803b158015610e5257600080fd5b505af1158015610e66573d6000803e3d6000fd5b50505050505050565b610e7983836116d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03167f4052c6dc5d3b3c3a2157e0e6c690c5b147aa5993712cb410bec0f735b0835eb460405160405180910390a3505050565b6000806001600160a01b03831660009081526001602052604090205460ff166005811115610f0e57610f0e611ed0565b141592915050565b6002546001600160a01b0316610f6e5760405162461bcd60e51b815260206004820152601e60248201527f4e65787420696d706c656d656e746174696f6e206973206e6f7420736574000060448201526064016104d0565b610f7783611680565b6000610f82846113f3565b9050836001600160a01b0316610fce8285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061151092505050565b6001600160a01b0316146110155760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b60448201526064016104d0565b6001600160a01b0384166000908152600160205260408082208151606081019092528054829060ff16600581111561104f5761104f611ed0565b600581111561106057611060611ed0565b815290546001600160401b03610100820481166020840152600160481b90910416604090910152905060058151600581111561109e5761109e611ed0565b036110eb5760405162461bcd60e51b815260206004820152601c60248201527f5061727469636970616e7420616c7265616479206d696772617465640000000060448201526064016104d0565b6040808301516001600160401b03166020830152600254905163a57ff12b60e01b815282916001600160a01b03169063a57ff12b906111309089908590600401611f94565b600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b50505050604051806060016040528060058081111561117f5761117f611ed0565b815260200182602001516001600160401b0316815260200182604001516001600160401b031681525060016000886001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548160ff021916908360058111156111f7576111f7611ed0565b0217905550602082015181546040938401516001600160401b03908116600160481b0267ffffffffffffffff60481b19919093166101000216610100600160881b031990911617179055516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691908816907f3eb28b1f22808b37a3272465ff69d98b0390939c8fe3674a2ed7ee4c8830b29b90600090a3505050505050565b6000828152602081905260409020600101546112bb816114b0565b6108ea838361161b565b7fbbde2da0ccd8bea978c1302dddf5d8b522b584b91c1e6ec4366bf503d383f46b6112ef816114b0565b6112f882611680565b60015b6001600160a01b03831660009081526001602052604090205460ff16600581111561132857611328611ed0565b146113665760405162461bcd60e51b815260206004820152600e60248201526d496e76616c69642073746174757360901b60448201526064016104d0565b6001600160a01b038216600081815260016020526040808220805460ff1916600390811790915590519092917f7c08542390a40cf3a63e55f43e29fd8cae8236fb659dd7591f4e436b85150b7f91a35050565b7f59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f56113e3816114b0565b6113ec82611680565b60046112fb565b604080516060810182526000808252602082018190529181018290529061141983610ede565b6114255750600061145d565b6001600160a01b03831660009081526001602081905260409091205461145a916101009091046001600160401b031690611fc7565b90505b604080516060810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682529490941660208501526001600160401b03909116908301525090565b6106318133611760565b6114c381610ede565b156106315760405162461bcd60e51b815260206004820152601960248201527f5061727469636970616e7420616c72656164792065786973740000000000000060448201526064016104d0565b60006115908261158a8560405160200161152a9190611f3a565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b906117c4565b9392505050565b6115a18282610da2565b610bce576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6116258282610da2565b15610bce576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61168981610ede565b6106315760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e7420646f6573206e6f7420657869737400000000000060448201526064016104d0565b6001600160a01b0382166000908152600160208190526040909120825181548493839160ff19169083600581111561170f5761170f611ed0565b021790555060208201518154604090930151610100600160881b03199093166101006001600160401b039283160267ffffffffffffffff60481b191617600160481b91909316029190911790555050565b61176a8282610da2565b610bce57611782816001600160a01b031660146117e8565b61178d8360206117e8565b60405160200161179e929190612012565b60408051601f198184030181529082905262461bcd60e51b82526104d091600401612087565b60008060006117d38585611983565b915091506117e0816119f1565b509392505050565b606060006117f78360026120ba565b6118029060026120d9565b6001600160401b0381111561181957611819611d0c565b6040519080825280601f01601f191660200182016040528015611843576020820181803683370190505b509050600360fc1b8160008151811061185e5761185e6120ec565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061188d5761188d6120ec565b60200101906001600160f81b031916908160001a90535060006118b18460026120ba565b6118bc9060016120d9565b90505b6001811115611934576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118f0576118f06120ec565b1a60f81b828281518110611906576119066120ec565b60200101906001600160f81b031916908160001a90535060049490941c9361192d81612102565b90506118bf565b5083156115905760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104d0565b60008082516041036119b95760208301516040840151606085015160001a6119ad87828585611ba7565b945094505050506119ea565b82516040036119e257602083015160408401516119d7868383611c94565b9350935050506119ea565b506000905060025b9250929050565b6000816004811115611a0557611a05611ed0565b03611a0d5750565b6001816004811115611a2157611a21611ed0565b03611a6e5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104d0565b6002816004811115611a8257611a82611ed0565b03611acf5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104d0565b6003816004811115611ae357611ae3611ed0565b03611b3b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104d0565b6004816004811115611b4f57611b4f611ed0565b036106315760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104d0565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611bde5750600090506003611c8b565b8460ff16601b14158015611bf657508460ff16601c14155b15611c075750600090506004611c8b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611c5b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611c8457600060019250925050611c8b565b9150600090505b94509492505050565b6000806001600160ff1b03831681611cb160ff86901c601b6120d9565b9050611cbf87828885611ba7565b935093505050935093915050565b600060208284031215611cdf57600080fd5b81356001600160e01b03198116811461159057600080fd5b6001600160a01b038116811461063157600080fd5b634e487b7160e01b600052604160045260246000fd5b80356001600160401b0381168114611d3957600080fd5b919050565b6000808284036080811215611d5257600080fd5b8335611d5d81611cf7565b92506060601f1982011215611d7157600080fd5b50604051606081018181106001600160401b0382111715611da257634e487b7160e01b600052604160045260246000fd5b604052602084013560068110611db757600080fd5b8152611dc560408501611d22565b6020820152611dd660608501611d22565b6040820152809150509250929050565b600060208284031215611df857600080fd5b813561159081611cf7565b600060208284031215611e1557600080fd5b5035919050565b600080600060408486031215611e3157600080fd5b8335611e3c81611cf7565b925060208401356001600160401b0380821115611e5857600080fd5b818601915086601f830112611e6c57600080fd5b813581811115611e7b57600080fd5b876020828501011115611e8d57600080fd5b6020830194508093505050509250925092565b60008060408385031215611eb357600080fd5b823591506020830135611ec581611cf7565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b805160068110611f0657634e487b7160e01b600052602160045260246000fd5b82526020818101516001600160401b039081169184019190915260409182015116910152565b6060810161044e8284611ee6565b81516001600160a01b039081168252602080840151909116908201526040918201516001600160401b03169181019190915260600190565b600060208284031215611f8457600080fd5b8151801515811461159057600080fd5b6001600160a01b0383168152608081016115906020830184611ee6565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019080821115611fe757611fe7611fb1565b5092915050565b60005b83811015612009578181015183820152602001611ff1565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161204a816017850160208801611fee565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161207b816028840160208801611fee565b01602801949350505050565b60208152600082518060208401526120a6816040850160208701611fee565b601f01601f19169190910160400192915050565b60008160001904831182151516156120d4576120d4611fb1565b500290565b8082018082111561044e5761044e611fb1565b634e487b7160e01b600052603260045260246000fd5b60008161211157612111611fb1565b50600019019056fea2646970667358221220e4319ffce348a3a6f2f1c51c087632ea34316a907b62d05e4cd9c9abd876311c64736f6c63430008100033",
  "devdoc": {
    "details": "Implementation for the YellowClearing. Version 1.0.",
    "kind": "dev",
    "methods": {
      "getIdentityPayload(address)": {
        "details": "Return identity payload structure for a supplied participant. Used to ease interaction with this contract.",
        "params": {
          "participant": "Address of participant to get identity payload for."
        },
        "returns": {
          "_0": "IdentityPayload Identity payload structure for a supplied participant."
        }
      },
      "getNextImplementation()": {
        "details": "Get next implementation address if set, zero address if not.",
        "returns": {
          "_0": "YellowClearingBase Next implementation address if set, zero address if not."
        }
      },
      "getParticipantData(address)": {
        "details": "Get participant data stored in the registry. Revert if participant is not present.",
        "params": {
          "participant": "Address of participant to get data about."
        },
        "returns": {
          "_0": "ParticipantData Participant data."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasParticipant(address)": {
        "details": "Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`.",
        "returns": {
          "_0": "True if participant is present, false otherwise."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrateParticipant(address,bytes)": {
        "details": "NextImplementation must have been set. Participant must not have been migrated.",
        "params": {
          "participant": "Address of participant to migrate.",
          "signature": "Participant identity payload signed by that participant."
        }
      },
      "migrateParticipantData(address,(uint8,uint64,uint64))": {
        "details": "Require PREVIOUS_IMPLEMENTATION_ROLE to invoke.",
        "params": {
          "data": "Participant data to migrate.",
          "participant": "Address of participant to migrate data of."
        }
      },
      "registerParticipant(address,bytes)": {
        "details": "Participant must not be present in this or any previous or subsequent implementations.",
        "params": {
          "participant": "Virtual (no address, only public key exist) address of participant to add.",
          "signature": "Participant identity payload signed by this same participant."
        }
      },
      "reinstateParticipant(address)": {
        "details": "Require AUDITOR_ROLE to invoke. Participant must have been suspended previously.",
        "params": {
          "participant": "Address of participant to reinstate."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "requireParticipantNotPresentBackwards(address)": {
        "details": "Recursively check that participant is not present in this registry and all previous ones.",
        "params": {
          "participant": "Address of participant to check."
        }
      },
      "requireParticipantNotPresentForwards(address)": {
        "details": "Recursively check that participant is not present in this registry and all subsequent ones.",
        "params": {
          "participant": "Address of participant to check."
        }
      },
      "requireParticipantNotPresentRecursive(address)": {
        "details": "Recursively check that participant is not present in this registry and all previous and subsequent ones.",
        "params": {
          "participant": "Address of participant to check."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setNextImplementation(address)": {
        "details": "Require REGISTRY_MAINTAINER_ROLE to be invoked. Require next implementation not to be already set. Require supplied next implementation contract to have granted this contract PREVIOUS_IMPLEMENTATION_ROLE.",
        "params": {
          "nextImplementation": "Next implementation address."
        }
      },
      "setParticipantData(address,(uint8,uint64,uint64))": {
        "details": "Require REGISTRY_MAINTAINER_ROLE to invoke. Participant must not have been migrated.",
        "params": {
          "data": "Data to set.",
          "participant": "Address of participant to set data of."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "suspendParticipant(address)": {
        "details": "Require AUDITOR_ROLE to invoke. Participant must be present and not migrated",
        "params": {
          "participant": "Address of participant to suspend."
        }
      },
      "validateParticipant(address)": {
        "details": "Require REGISTRY_VALIDATOR_ROLE to invoke. Participant must be present with Pending status.",
        "params": {
          "participant": "Address of participant to validate."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIdentityPayload(address)": {
        "notice": "Return identity payload structure for a supplied participant. Used to ease interaction with this contract."
      },
      "getNextImplementation()": {
        "notice": "Get next implementation address if set, zero address if not."
      },
      "getParticipantData(address)": {
        "notice": "Get participant data stored in the registry. Revert if participant is not present."
      },
      "hasParticipant(address)": {
        "notice": "Check if participant is present in the registry. Participant is not present if it is not stored in the mapping or has `ParticipantStatus.None`."
      },
      "migrateParticipant(address,bytes)": {
        "notice": "Migrate participant to the newest implementation present in upgrades chain. Emit `ParticipantMigratedFrom` and `ParticipantMigratedTo` events."
      },
      "migrateParticipantData(address,(uint8,uint64,uint64))": {
        "notice": "Recursively migrate participant data to newest implementation in upgrades chain. Emit `ParticipantMigratedTo` event."
      },
      "registerParticipant(address,bytes)": {
        "notice": "Register participant by adding it to the registry with Pending status. Emit `ParticipantRegistered` event."
      },
      "reinstateParticipant(address)": {
        "notice": "Reinstate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event."
      },
      "requireParticipantNotPresentBackwards(address)": {
        "notice": "Recursively check that participant is not present in this registry and all previous ones."
      },
      "requireParticipantNotPresentForwards(address)": {
        "notice": "Recursively check that participant is not present in this registry and all subsequent ones."
      },
      "requireParticipantNotPresentRecursive(address)": {
        "notice": "Recursively check that participant is not present in this registry and all previous and subsequent ones."
      },
      "setNextImplementation(address)": {
        "notice": "Set next implementation address. Must not be zero address or self. Emit `NextImplementationSet` event."
      },
      "setParticipantData(address,(uint8,uint64,uint64))": {
        "notice": "Set participant data to data supplied. Emit `ParticipantDataChanged` event."
      },
      "suspendParticipant(address)": {
        "notice": "Suspend participant and set their status to Suspended. Emit `ParticipantStatusChanged` event."
      },
      "validateParticipant(address)": {
        "notice": "Validate participant and, depending on checks to be added, set their status to either Active or Inactive. Emit `ParticipantStatusChanged` event."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3232,
        "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3227_storage)"
      },
      {
        "astId": 5939,
        "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
        "label": "_participantData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(ParticipantData)5906_storage)"
      },
      {
        "astId": 5945,
        "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
        "label": "_nextImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(YellowClearingBase)6685"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(YellowClearingBase)6685": {
        "encoding": "inplace",
        "label": "contract YellowClearingBase",
        "numberOfBytes": "20"
      },
      "t_enum(ParticipantStatus)5898": {
        "encoding": "inplace",
        "label": "enum YellowClearingBase.ParticipantStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ParticipantData)5906_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YellowClearingBase.ParticipantData)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantData)5906_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3227_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3227_storage"
      },
      "t_struct(ParticipantData)5906_storage": {
        "encoding": "inplace",
        "label": "struct YellowClearingBase.ParticipantData",
        "members": [
          {
            "astId": 5901,
            "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ParticipantStatus)5898"
          },
          {
            "astId": 5903,
            "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
            "label": "nonce",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5905,
            "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
            "label": "registrationTime",
            "offset": 9,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3227_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3224,
            "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3226,
            "contract": "contracts/clearing/YellowClearingV1.sol:YellowClearingV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}

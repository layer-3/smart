{
  "address": "0x1c4f55FbB4c6d3Fb4Fbc0f933c6478c9564994c9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBrokerAddress",
          "type": "address"
        }
      ],
      "name": "BrokerAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCoSignerAddress",
          "type": "address"
        }
      ],
      "name": "CoSignerAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rid",
          "type": "bytes32"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract VaultImplBase",
          "name": "nextImplementation",
          "type": "address"
        }
      ],
      "name": "NextImplementationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rid",
          "type": "bytes32"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_ACTION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_ACTION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "action",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expire",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "implAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Payload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "brokerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "coSignerSignature",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBrokerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCoSignerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextImplementation",
      "outputs": [
        {
          "internalType": "contract VaultImplBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setBrokerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setCoSignerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VaultImplBase",
          "name": "nextImplementation",
          "type": "address"
        }
      ],
      "name": "setNextImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brokerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coSignerAddress",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "action",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "rid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "expire",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVault.Allocation[]",
              "name": "allocations",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "implAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVault.Payload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "brokerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "coSignerSignature",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "60573daaf703b70dd06406be8237da4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBrokerAddress\",\"type\":\"address\"}],\"name\":\"BrokerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCoSignerAddress\",\"type\":\"address\"}],\"name\":\"CoSignerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rid\",\"type\":\"bytes32\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract VaultImplBase\",\"name\":\"nextImplementation\",\"type\":\"address\"}],\"name\":\"NextImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rid\",\"type\":\"bytes32\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_ACTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_ACTION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expire\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"brokerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coSignerSignature\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrokerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextImplementation\",\"outputs\":[{\"internalType\":\"contract VaultImplBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setBrokerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setCoSignerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VaultImplBase\",\"name\":\"nextImplementation\",\"type\":\"address\"}],\"name\":\"setNextImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brokerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coSignerAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expire\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Allocation[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"brokerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"coSignerSignature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation for the Proxy. Version 1.0.\",\"kind\":\"dev\",\"methods\":{\"applyUpgrade()\":{\"details\":\"Can only be called by Proxy.\"},\"deposit((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)\":{\"details\":\"Deposit assets with given payload from the caller. Emits `Deposited` event.\",\"params\":{\"brokerSignature\":\"Payload signed by the broker.\",\"coSignerSignature\":\"Payload signed by the coSigner.\",\"payload\":\"Deposit payload.\"}},\"getBrokerAddress()\":{\"details\":\"Get broker (only public key it is derived from exists) key for this vault.\",\"returns\":{\"_0\":\"address Broker (only public key it is derived from exists) key.\"}},\"getCoSignerAddress()\":{\"details\":\"Get coSigner (only public key it is derived from exists) key for this vault.\",\"returns\":{\"_0\":\"address CoSigner (only public key it is derived from exists) key.\"}},\"getLastId()\":{\"details\":\"Get last ledger id (deposits and withdrawals id).\",\"returns\":{\"_0\":\"uint256 Ledger id.\"}},\"getNextImplementation()\":{\"details\":\"Must not be a delegated call.\",\"returns\":{\"_0\":\"VaultImplBase Next implementation contract address or zero address if not set yet.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize()\":{\"details\":\"Can only be called by Proxy.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBrokerAddress(address,bytes)\":{\"details\":\"Supplied payload must be signed by broker's current public key.\",\"params\":{\"address_\":\"New broker address.\",\"signature\":\"New address signed by broker's current public key.\"}},\"setCoSignerAddress(address,bytes)\":{\"details\":\"Supplied payload must be signed by coSigner's current public key.\",\"params\":{\"address_\":\"New coSigner address.\",\"signature\":\"New address signed by coSigner's current public key.\"}},\"setNextImplementation(address)\":{\"details\":\"Must not be a delegated call. Require caller to be Implementation Maintainer. Must not be zero address or self address. Emits `NextImplementationSet` event.\",\"params\":{\"nextImplementation\":\"Next implementation contract address.\"}},\"setup(address,address)\":{\"details\":\"Require DEFAULT_ADMIN_ROLE to invoke. NOTE: once addresses are set, there is no way to change them if their private key is lost. In such case, vault implementation contract becomes useless and requires an upgrade.\",\"params\":{\"brokerAddress\":\"Address derived from broker public key.\",\"coSignerAddress\":\"Address derived from coSigner public key.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgrade()\":{\"details\":\"Require called to be Proxy Maintainer. Can only be called by Proxy.\"},\"withdraw((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)\":{\"details\":\"Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.\",\"params\":{\"brokerSignature\":\"Payload signed by the Broker.\",\"coSignerSignature\":\"Payload signed by the coSigner.\",\"payload\":\"Withdraw payload.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BrokerAddressSet(address)\":{\"notice\":\"Address derived from broker's new public key is set.\"},\"CoSignerAddressSet(address)\":{\"notice\":\"Address derived from CoSigner's new public key is set.\"},\"Deposited(uint256,address,address,uint256,bytes32)\":{\"notice\":\"Deposited event.\"},\"Withdrawn(uint256,address,address,uint256,bytes32)\":{\"notice\":\"Withdrawn event.\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_ACTION()\":{\"notice\":\"Deposit type identifier value.\"},\"WITHDRAW_ACTION()\":{\"notice\":\"Withdrawal type identifier value.\"},\"applyUpgrade()\":{\"notice\":\"Call `_migrate` defined by the Implementation to migrate any storage variables. Call `upgrade` function on itself to ensure the this contract is the latest version.\"},\"deposit((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)\":{\"notice\":\"Deposit assets with given payload from the caller. Emits `Deposited` event.\"},\"getBrokerAddress()\":{\"notice\":\"Get broker (only public key it is derived from exists) key for this vault.\"},\"getCoSignerAddress()\":{\"notice\":\"Get coSigner (only public key it is derived from exists) key for this vault.\"},\"getLastId()\":{\"notice\":\"Get last ledger id (deposits and withdrawals id).\"},\"getNextImplementation()\":{\"notice\":\"Return next implementation contract address or zero address if not set yet. NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading.\"},\"initialize()\":{\"notice\":\"Call `_initialize_ defined by the Implementation to initialize any storage variables.\"},\"setBrokerAddress(address,bytes)\":{\"notice\":\"Set the address derived from the broker's new public key. Emits `BrokerAddressSet` event.\"},\"setCoSignerAddress(address,bytes)\":{\"notice\":\"Set the address derived from the coSigner's new public key. Emits `CoSignerAddressSet` event.\"},\"setNextImplementation(address)\":{\"notice\":\"Set next implementation contract address if not set yet. NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading.\"},\"setup(address,address)\":{\"notice\":\"The setup function sets addresses of the broker and coSigner.\"},\"upgrade()\":{\"notice\":\"Perform an upgrade from the current implementation contract to a next one specified in a current Implementation. Also calls `applyUpgrade` on a next implementation.\"},\"withdraw((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)\":{\"notice\":\"Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultImplV1.sol\":\"VaultImplV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/vault/IUnstandardizedERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IUnstandardizedERC20 {\\n\\tfunction transfer(address to, uint256 amount) external;\\n\\n\\tfunction transferFrom(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb6a5db702279620024d2591d75fa96bf064331cc9933589789e9012cbe6d67ec\",\"license\":\"MIT\"},\"contracts/vault/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/**\\n * @notice IVault is the interface to implement custody.\\n */\\ninterface IVault {\\n\\t// ======================\\n\\t// Structs\\n\\t// ======================\\n\\tstruct Allocation {\\n\\t\\taddress asset;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tbytes32 action;\\n\\t\\tbytes32 rid;\\n\\t\\tuint64 expire;\\n\\t\\taddress destination;\\n\\t\\tAllocation[] allocations;\\n\\t\\taddress implAddress;\\n\\t\\tuint256 chainId;\\n\\t}\\n\\n\\t// ======================\\n\\t// Functions\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice The setup function sets addresses of the broker and coSigner.\\n\\t * @dev Require DEFAULT_ADMIN_ROLE to invoke. NOTE: once addresses are set, there is no way to change them if their private key is lost. In such case, vault implementation contract becomes useless and requires an upgrade.\\n\\t * @param brokerAddress Address derived from broker public key.\\n\\t * @param coSignerAddress Address derived from coSigner public key.\\n\\t */\\n\\tfunction setup(address brokerAddress, address coSignerAddress) external;\\n\\n\\t/**\\n\\t * @notice Get last ledger id (deposits and withdrawals id).\\n\\t * @return uint256 Ledger id.\\n\\t */\\n\\tfunction getLastId() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Get broker (only public key it is derived from exists) key for this vault.\\n\\t * @dev Get broker (only public key it is derived from exists) key for this vault.\\n\\t * @return address Broker address for this vault.\\n\\t */\\n\\tfunction getBrokerAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Set the address derived from the broker's new public key. Emits `BrokerAddressSet` event.\\n\\t * @dev Supplied payload must be signed by broker's current public key.\\n\\t * @param address_ New broker address.\\n\\t * @param signature New address signed by broker's current public key.\\n\\t */\\n\\tfunction setBrokerAddress(address address_, bytes calldata signature) external;\\n\\n\\t/**\\n\\t * @notice Get coSigner (only public key it is derived from exists) key for this vault.\\n\\t * @dev Get coSigner (only public key it is derived from exists) key for this vault.\\n\\t * @return address CoSigner address for this vault.\\n\\t */\\n\\tfunction getCoSignerAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Set the address derived from the coSigner's new public key. Emits `CoSignerAddressSet` event.\\n\\t * @dev Supplied payload must be signed by coSigner's current public key.\\n\\t * @param address_ New coSigner address.\\n\\t * @param signature New address signed by coSigner's current public key.\\n\\t */\\n\\tfunction setCoSignerAddress(address address_, bytes calldata signature) external;\\n\\n\\t/**\\n\\t * @notice Deposit assets with given payload from the caller. Emits `Deposited` event.\\n\\t * @param payload Deposit payload.\\n\\t * @param brokerSignature Payload signed by the Broker.\\n\\t * @param otpSignature Payload signed by the CoSigner service.\\n\\t */\\n\\tfunction deposit(\\n\\t\\tPayload calldata payload,\\n\\t\\tbytes calldata brokerSignature,\\n\\t\\tbytes calldata otpSignature\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @notice Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.\\n\\t * @param payload Withdraw payload.\\n\\t * @param brokerSignature Payload signed by the Broker.\\n\\t * @param otpSignature Payload signed by the CoSigner service.\\n\\t */\\n\\tfunction withdraw(\\n\\t\\tPayload calldata payload,\\n\\t\\tbytes calldata brokerSignature,\\n\\t\\tbytes calldata otpSignature\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @notice Address derived from broker's new public key is set.\\n\\t * @param newBrokerAddress Updated Broker address.\\n\\t */\\n\\tevent BrokerAddressSet(address indexed newBrokerAddress);\\n\\n\\t/**\\n\\t * @notice Address derived from CoSigner's new public key is set.\\n\\t * @param newCoSignerAddress Updated CoSigner address.\\n\\t */\\n\\tevent CoSignerAddressSet(address indexed newCoSignerAddress);\\n\\n\\t// ======================\\n\\t// Events\\n\\t// ======================\\n\\t/**\\n\\t * @notice Deposited event.\\n\\t * @param id Ledger id.\\n\\t * @param account Account address.\\n\\t * @param asset Asset address deposited.\\n\\t * @param amount Quantity of assets deposited.\\n\\t * @param rid Request id from broker.\\n\\t */\\n\\tevent Deposited(\\n\\t\\tuint256 indexed id,\\n\\t\\taddress indexed account,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32 rid\\n\\t);\\n\\n\\t/**\\n\\t * @notice Withdrawn event.\\n\\t * @param id Ledger id.\\n\\t * @param destination Destination address.\\n\\t * @param asset Asset address withdrawn.\\n\\t * @param amount Quantity of assets withdrawn.\\n\\t * @param rid Request id from broker.\\n\\t */\\n\\tevent Withdrawn(\\n\\t\\tuint256 indexed id,\\n\\t\\taddress indexed destination,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tbytes32 rid\\n\\t);\\n}\\n\",\"keccak256\":\"0xf3953d90f761fb84bc257cc1e35eb88b29228d2ef89ec4ed20bd928655089e9b\",\"license\":\"MIT\"},\"contracts/vault/VaultImplBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport '@openzeppelin/contracts/interfaces/draft-IERC1822.sol';\\nimport '@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\n\\n/**\\n * @notice Base logic for the Implementation.\\n * @dev The actual Implementation must derive from this contract and override `_initialize` and `_migrate` methods if necessary.\\n */\\nabstract contract VaultImplBase is IERC1822Proxiable, ERC1967Upgrade, AccessControl {\\n\\t// ======================\\n\\t// VaultImplBase specific\\n\\t// ======================\\n\\n\\tbytes32 public constant MAINTAINER_ROLE = keccak256('MAINTAINER_ROLE');\\n\\n\\t/**\\n\\t * @notice Set the Implementation deployer as an Admin and Maintainer.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_setupDeployerRoles();\\n\\t}\\n\\n\\taddress private immutable __self = address(this);\\n\\n\\t/**\\n\\t * @notice Check that the execution is being performed through a delegatecall call and that the execution context is\\n\\t * a proxy contract with an implementation (as defined in ERC1967) pointing to self.\\n\\t */\\n\\tmodifier onlyProxy() {\\n\\t\\trequire(address(this) != __self, 'Must be called through delegatecall');\\n\\t\\trequire(_getImplementation() == __self, 'Must be called through active proxy');\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check that the execution is not being performed through a delegate call. This allows a function to be\\n\\t * callable on the implementing contract but not through proxies.\\n\\t */\\n\\tmodifier notDelegated() {\\n\\t\\trequire(address(this) == __self, 'Must not be called through delegatecall');\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check that the caller has MAINTAINER_ROLE.\\n\\t * @dev Role differs depending on the caller. If called via Proxy, then Proxy's storage is checked.\\n\\t * If called directly, this contract's storage is checked. This logic allows to have a different Proxy and Implementation roles.\\n\\t */\\n\\tmodifier onlyMaintainer() {\\n\\t\\trequire(AccessControl.hasRole(MAINTAINER_ROLE, msg.sender), 'Caller not maintainer');\\n\\t\\t_;\\n\\t}\\n\\n\\t// ======================\\n\\t// Caller-specific storage\\n\\t// ======================\\n\\n\\t/**\\n\\t * @notice Grant DEFAULT_ADMIN_ROLE and MAINTAINER_ROLE to the caller. Internal method.\\n\\t * @dev Grant DEFAULT_ADMIN_ROLE and MAINTAINER_ROLE to the caller. Internal method.\\n\\t */\\n\\tfunction _setupDeployerRoles() internal {\\n\\t\\tAccessControl._grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\tAccessControl._grantRole(MAINTAINER_ROLE, msg.sender);\\n\\t}\\n\\n\\t// ======================\\n\\t// Implementation context storage\\n\\t// ======================\\n\\t/**\\n\\t * @dev Indicates that a next implementation address was set.\\n\\t * @param nextImplementation Address of a next implementation that was set.\\n\\t */\\n\\tevent NextImplementationSet(VaultImplBase indexed nextImplementation);\\n\\n\\t/** @dev Double underscore enables using the same variable name with a single underscore in a derived contract */\\n\\tVaultImplBase private __nextImplementation;\\n\\n\\t/**\\n\\t * @notice Return next implementation contract address or zero address if not set yet.\\n\\t * NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading.\\n\\t * @dev Must not be a delegated call.\\n\\t * @return VaultImplBase Next implementation contract address or zero address if not set yet.\\n\\t */\\n\\tfunction getNextImplementation() external view notDelegated returns (VaultImplBase) {\\n\\t\\treturn __nextImplementation;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set next implementation contract address if not set yet.\\n\\t * NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading.\\n\\t * @dev Must not be a delegated call. Require caller to be Implementation Maintainer. Must not be zero address or self address.\\n\\t * Emits `NextImplementationSet` event.\\n\\t * @param nextImplementation Next implementation contract address.\\n\\t */\\n\\tfunction setNextImplementation(VaultImplBase nextImplementation)\\n\\t\\texternal\\n\\t\\tnotDelegated\\n\\t\\tonlyMaintainer\\n\\t{\\n\\t\\trequire(address(__nextImplementation) == address(0), 'nextImplementation is already set');\\n\\t\\t// prevent unnecessary event emissions & infinite nextImplementation chain\\n\\t\\trequire(\\n\\t\\t\\taddress(nextImplementation) != address(0) && address(nextImplementation) != __self,\\n\\t\\t\\t'Invalid nextImplementation supplied'\\n\\t\\t);\\n\\n\\t\\t__nextImplementation = nextImplementation;\\n\\n\\t\\temit NextImplementationSet(nextImplementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Implementation of the ERC1822 function. This returns the storage slot used by the\\n\\t * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n\\t */\\n\\tfunction proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n\\t\\treturn ERC1967Upgrade._IMPLEMENTATION_SLOT;\\n\\t}\\n\\n\\t// ======================\\n\\t// Proxy context storage\\n\\t// ======================\\n\\tbool private __initialized;\\n\\tbool private __migrated;\\n\\n\\t/**\\n\\t * @notice Override this function for Implementation to initialize any storage variables. Use instead of constructor.\\n\\t * @dev Can only be called by Proxy.\\n\\t */\\n\\tfunction _initialize() internal virtual onlyProxy {}\\n\\n\\t/**\\n\\t * @notice Call `_initialize_ defined by the Implementation to initialize any storage variables.\\n\\t * @dev Can only be called by Proxy.\\n\\t */\\n\\tfunction initialize() external onlyProxy {\\n\\t\\trequire(__initialized == false, 'Already initialized');\\n\\t\\t__initialized = true;\\n\\t\\t__migrated = true;\\n\\t\\t_setupDeployerRoles();\\n\\t\\t_initialize();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Override this function for Implementation to migrate any storage variables between different implementation versions if needed.\\n\\t * @dev Can only be called by Proxy.\\n\\t */\\n\\tfunction _migrate() internal virtual onlyProxy {}\\n\\n\\t/**\\n\\t * @notice Call `_migrate` defined by the Implementation to migrate any storage variables. Call `upgrade` function on itself to ensure the this contract is the latest version.\\n\\t * @dev Can only be called by Proxy.\\n\\t */\\n\\tfunction applyUpgrade() external onlyProxy {\\n\\t\\trequire(__migrated == false, 'Already migrated');\\n\\t\\t__migrated = true;\\n\\t\\t_migrate();\\n\\n\\t\\tif (address(VaultImplBase(_getImplementation()).getNextImplementation()) != address(0)) {\\n\\t\\t\\t// do recursive upgrade\\n\\t\\t\\tupgrade();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Perform an upgrade from the current implementation contract to a next one specified in a current Implementation. Also calls `applyUpgrade` on a next implementation.\\n\\t * @dev Require called to be Proxy Maintainer. Can only be called by Proxy.\\n\\t */\\n\\tfunction upgrade() public onlyMaintainer onlyProxy {\\n\\t\\tVaultImplBase nextImplementation = VaultImplBase(_getImplementation())\\n\\t\\t\\t.getNextImplementation();\\n\\n\\t\\tif (address(nextImplementation) == address(0)) {\\n\\t\\t\\trevert('No next implementation to upgrade to');\\n\\t\\t}\\n\\n\\t\\t__migrated = false;\\n\\t\\t_upgradeToAndCallUUPS(\\n\\t\\t\\taddress(nextImplementation),\\n\\t\\t\\tabi.encodeWithSelector(bytes4(keccak256('applyUpgrade()'))),\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe4e0856131f560997edd821698373cb2a137c4939b1d824a1c48193b450e145f\",\"license\":\"MIT\"},\"contracts/vault/VaultImplV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport './VaultImplBase.sol';\\nimport './IVault.sol';\\nimport './IUnstandardizedERC20.sol';\\n\\n// TODO: Benchmark if storing error messages as constants is cheaper than using string literals.\\n\\n/**\\n * @dev Implementation for the Proxy. Version 1.0.\\n */\\ncontract VaultImplV1 is VaultImplBase, IVault {\\n\\tusing ECDSA for bytes32;\\n\\tusing Counters for Counters.Counter;\\n\\n\\t/**\\n\\t * Deposit type identifier value.\\n\\t */\\n\\tbytes32 public constant DEPOSIT_ACTION = keccak256('YELLOW_VAULT_DEPOSIT_ACTION');\\n\\n\\t/**\\n\\t * Withdrawal type identifier value.\\n\\t */\\n\\tbytes32 public constant WITHDRAW_ACTION = keccak256('YELLOW_VAULT_WITHDRAW_ACTION');\\n\\n\\tbool private _isSetup = false;\\n\\n\\t// Not a real address, only public key exists.\\n\\taddress private _brokerAddress;\\n\\t// Not a real address, only public key exists.\\n\\taddress private _coSignerAddress;\\n\\n\\tCounters.Counter private _ledgerId;\\n\\n\\t// Keep track of used signatures to prevent reuse before expiration.\\n\\tmapping(address => mapping(bytes32 => bool)) private _sigUsage;\\n\\n\\t/**\\n\\t * @notice Revert if hash of supplied signature was already used by the issuer.\\n\\t * @dev Revert if hash of supplied signature was already used by the issuer.\\n\\t * @param issuer Account using supplied signature.\\n\\t * @param signature Signature used as identifier for action requested from vault.\\n\\t */\\n\\tfunction _requireSigNotUsed(address issuer, bytes memory signature) internal view {\\n\\t\\trequire(!_sigUsage[issuer][keccak256(signature)], 'Signature already used');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check supplied signature to be indeed signed by claimed signer.\\n\\t * @dev Check supplied signature to be indeed signed by claimed signer.\\n\\t * @param signer Signer claimed to have signed the payload.\\n\\t * @param encodedData Encoded data, which denotes action to be performed.\\n\\t * @param signature Payload signed by claimed signer.\\n\\t */\\n\\tfunction _requireValidSignature(\\n\\t\\taddress signer,\\n\\t\\tbytes memory encodedData,\\n\\t\\tbytes memory signature\\n\\t) internal pure {\\n\\t\\trequire(\\n\\t\\t\\tkeccak256(encodedData).toEthSignedMessageHash().recover(signature) == signer,\\n\\t\\t\\t'Invalid signature'\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireValidAddress(address address_) internal pure {\\n\\t\\trequire(address_ != address(0), 'Invalid address');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check that payload data is correct: expire timestamp is due, destination is not zero address, there is no zero allocation amount, implementation address specified is this contract and chain id is indeed this chain's id.\\n\\t * @dev Check that payload data is correct: expire timestamp is due, destination is not zero address, there is no zero allocation amount, implementation address specified is this contract and chain id is indeed this chain's id.\\n\\t * @param payload Payload structure, which denotes action to be performed.\\n\\t */\\n\\tfunction _checkPayload(Payload memory payload) internal view {\\n\\t\\trequire(payload.expire > block.timestamp, 'Request expired'); //solhint-disable-line not-rely-on-time\\n\\t\\trequire(payload.destination != address(0), 'Destination is zero address');\\n\\n\\t\\tfor (uint256 i = 0; i < payload.allocations.length; i++) {\\n\\t\\t\\trequire(payload.allocations[i].amount > 0, 'Amount is zero');\\n\\t\\t}\\n\\n\\t\\trequire(payload.implAddress == _getImplementation(), 'Invalid implementation address');\\n\\t\\trequire(payload.chainId == getChainId(), 'Invalid chain id');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Mark the signature as used by the issuer.\\n\\t * @dev Mark the signature as used by the issuer.\\n\\t * @param issuer User issuer address.\\n\\t * @param signature Signature used as identifier for action requested from vault.\\n\\t */\\n\\tfunction _useSignature(address issuer, bytes memory signature) internal {\\n\\t\\t_sigUsage[issuer][keccak256(signature)] = true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return chain id.\\n\\t * @dev Return chain id.\\n\\t * @return uint256 Chain id.\\n\\t */\\n\\tfunction getChainId() internal view returns (uint256) {\\n\\t\\tuint256 id;\\n\\t\\t/* solhint-disable no-inline-assembly */\\n\\t\\tassembly {\\n\\t\\t\\tid := chainid()\\n\\t\\t}\\n\\n\\t\\t/* solhint-disable no-inline-assembly */\\n\\t\\treturn id;\\n\\t}\\n\\n\\t/**\\n\\t * @notice The setup function sets addresses of the broker and coSigner.\\n\\t * @dev Require DEFAULT_ADMIN_ROLE to invoke. NOTE: once addresses are set, there is no way to change them if their private key is lost. In such case, vault implementation contract becomes useless and requires an upgrade.\\n\\t * @param brokerAddress Address derived from broker public key.\\n\\t * @param coSignerAddress Address derived from coSigner public key.\\n\\t */\\n\\tfunction setup(\\n\\t\\taddress brokerAddress,\\n\\t\\taddress coSignerAddress\\n\\t) external onlyProxy onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(!_isSetup, 'Vault is already setup');\\n\\n\\t\\t_requireValidAddress(brokerAddress);\\n\\t\\t_requireValidAddress(coSignerAddress);\\n\\n\\t\\t_isSetup = true;\\n\\n\\t\\t_brokerAddress = brokerAddress;\\n\\t\\t_coSignerAddress = coSignerAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get last ledger id (deposits and withdrawals id).\\n\\t * @dev Get last ledger id (deposits and withdrawals id).\\n\\t * @return uint256 Ledger id.\\n\\t */\\n\\tfunction getLastId() external view override onlyProxy returns (uint256) {\\n\\t\\treturn _ledgerId.current();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get broker (only public key it is derived from exists) key for this vault.\\n\\t * @dev Get broker (only public key it is derived from exists) key for this vault.\\n\\t * @return address Broker (only public key it is derived from exists) key.\\n\\t */\\n\\tfunction getBrokerAddress() external view onlyProxy returns (address) {\\n\\t\\treturn _brokerAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set the address derived from the broker's new public key. Emits `BrokerAddressSet` event.\\n\\t * @dev Supplied payload must be signed by broker's current public key.\\n\\t * @param address_ New broker address.\\n\\t * @param signature New address signed by broker's current public key.\\n\\t */\\n\\tfunction setBrokerAddress(address address_, bytes calldata signature) external onlyProxy {\\n\\t\\t_requireValidSignature(_brokerAddress, abi.encode(address_), signature);\\n\\t\\t_requireValidAddress(address_);\\n\\n\\t\\t_brokerAddress = address_;\\n\\n\\t\\temit BrokerAddressSet(address_);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get coSigner (only public key it is derived from exists) key for this vault.\\n\\t * @dev Get coSigner (only public key it is derived from exists) key for this vault.\\n\\t * @return address CoSigner (only public key it is derived from exists) key.\\n\\t */\\n\\tfunction getCoSignerAddress() external view onlyProxy returns (address) {\\n\\t\\treturn _coSignerAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set the address derived from the coSigner's new public key. Emits `CoSignerAddressSet` event.\\n\\t * @dev Supplied payload must be signed by coSigner's current public key.\\n\\t * @param address_ New coSigner address.\\n\\t * @param signature New address signed by coSigner's current public key.\\n\\t */\\n\\tfunction setCoSignerAddress(address address_, bytes calldata signature) external onlyProxy {\\n\\t\\t_requireValidSignature(_coSignerAddress, abi.encode(address_), signature);\\n\\t\\t_requireValidAddress(address_);\\n\\n\\t\\t_coSignerAddress = address_;\\n\\n\\t\\temit CoSignerAddressSet(address_);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deposit assets with given payload from the caller. Emits `Deposited` event.\\n\\t * @dev Deposit assets with given payload from the caller. Emits `Deposited` event.\\n\\t * @param payload Deposit payload.\\n\\t * @param brokerSignature Payload signed by the broker.\\n\\t * @param coSignerSignature Payload signed by the coSigner.\\n\\t */\\n\\tfunction deposit(\\n\\t\\tPayload calldata payload,\\n\\t\\tbytes calldata brokerSignature,\\n\\t\\tbytes calldata coSignerSignature\\n\\t) external payable onlyProxy {\\n\\t\\taddress issuer = msg.sender;\\n\\n\\t\\t// check signatures\\n\\t\\t_requireSigNotUsed(issuer, brokerSignature);\\n\\t\\t_requireSigNotUsed(issuer, coSignerSignature);\\n\\n\\t\\tbytes memory encodedPayload = abi.encode(payload);\\n\\t\\t_requireValidSignature(_brokerAddress, encodedPayload, brokerSignature);\\n\\t\\t_requireValidSignature(_coSignerAddress, encodedPayload, coSignerSignature);\\n\\n\\t\\t// check payload\\n\\t\\t_checkPayload(payload);\\n\\n\\t\\trequire(payload.action == DEPOSIT_ACTION, 'Invalid action');\\n\\t\\trequire(payload.destination == issuer, 'Invalid destination');\\n\\n\\t\\t// use signatures\\n\\t\\t_useSignature(issuer, brokerSignature);\\n\\t\\t_useSignature(issuer, coSignerSignature);\\n\\n\\t\\t// deposit allocations\\n\\t\\tfor (uint256 i = 0; i < payload.allocations.length; i++) {\\n\\t\\t\\taddress asset = payload.allocations[i].asset;\\n\\t\\t\\tuint256 amount = payload.allocations[i].amount;\\n\\n\\t\\t\\tif (asset == address(0)) {\\n\\t\\t\\t\\trequire(msg.value == amount, 'Incorrect msg.value');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIUnstandardizedERC20(asset).transferFrom(\\n\\t\\t\\t\\t\\tpayload.destination,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tamount\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\t// protected from reentrancy by marking signatures as used\\n\\t\\t\\t\\trequire(_retrieveTransferResult(), 'Could not deposit ERC20');\\n\\t\\t\\t}\\n\\n\\t\\t\\t_ledgerId.increment();\\n\\n\\t\\t\\temit Deposited(\\n\\t\\t\\t\\t_ledgerId.current(),\\n\\t\\t\\t\\tpayload.destination,\\n\\t\\t\\t\\tpayload.allocations[i].asset,\\n\\t\\t\\t\\tpayload.allocations[i].amount,\\n\\t\\t\\t\\tpayload.rid\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.\\n\\t * @dev Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.\\n\\t * @param payload Withdraw payload.\\n\\t * @param brokerSignature Payload signed by the Broker.\\n\\t * @param coSignerSignature Payload signed by the coSigner.\\n\\t */\\n\\tfunction withdraw(\\n\\t\\tPayload calldata payload,\\n\\t\\tbytes calldata brokerSignature,\\n\\t\\tbytes calldata coSignerSignature\\n\\t) external payable onlyProxy {\\n\\t\\taddress issuer = msg.sender;\\n\\n\\t\\t// check signatures\\n\\t\\t_requireSigNotUsed(issuer, brokerSignature);\\n\\t\\t_requireSigNotUsed(issuer, coSignerSignature);\\n\\n\\t\\tbytes memory encodedPayload = abi.encode(payload);\\n\\t\\t_requireValidSignature(_brokerAddress, encodedPayload, brokerSignature);\\n\\t\\t_requireValidSignature(_coSignerAddress, encodedPayload, coSignerSignature);\\n\\n\\t\\t// check payload\\n\\t\\t_checkPayload(payload);\\n\\n\\t\\trequire(payload.action == WITHDRAW_ACTION, 'Invalid action');\\n\\n\\t\\t// use signatures\\n\\t\\t_useSignature(issuer, brokerSignature);\\n\\t\\t_useSignature(issuer, coSignerSignature);\\n\\n\\t\\t// withdraw allocations\\n\\t\\tfor (uint256 i = 0; i < payload.allocations.length; i++) {\\n\\t\\t\\taddress asset = payload.allocations[i].asset;\\n\\t\\t\\tuint256 amount = payload.allocations[i].amount;\\n\\n\\t\\t\\tif (asset == address(0)) {\\n\\t\\t\\t\\t(bool success, ) = payload.destination.call{value: amount}(''); //solhint-disable-line avoid-low-level-calls\\n\\n\\t\\t\\t\\trequire(success, 'Could not transfer ETH');\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIUnstandardizedERC20(asset).transfer(payload.destination, amount);\\n\\n\\t\\t\\t\\trequire(_retrieveTransferResult(), 'Could not transfer ERC20');\\n\\t\\t\\t}\\n\\n\\t\\t\\t_ledgerId.increment();\\n\\n\\t\\t\\temit Withdrawn(\\n\\t\\t\\t\\t_ledgerId.current(),\\n\\t\\t\\t\\tpayload.destination,\\n\\t\\t\\t\\tpayload.allocations[i].asset,\\n\\t\\t\\t\\tpayload.allocations[i].amount,\\n\\t\\t\\t\\tpayload.rid\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieve the result of `transfer` or `transferFrom` function, supposing it is the latest called function.\\n\\t * @dev Tackles the inconsistency in ERC20 implementations regarding the return value of `transfer` and `transferFrom`. More: https://github.com/ethereum/solidity/issues/4116.\\n\\t * @return result Result of `transfer` or `transferFrom` function.\\n\\t */\\n\\tfunction _retrieveTransferResult() internal pure returns (bool result) {\\n\\t\\tassembly {\\n\\t\\t\\tswitch returndatasize()\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t// This is UnstandardizedToken\\n\\t\\t\\t\\tresult := not(0) // result is true\\n\\t\\t\\t}\\n\\t\\t\\tcase 32 {\\n\\t\\t\\t\\t// This is ERC20 compliant token\\n\\t\\t\\t\\treturndatacopy(0, 0, 32)\\n\\t\\t\\t\\tresult := mload(0) // result == return data of external call\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\t// This is not an ERC20 token\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x5adfa2c97d103e4c54e6f285d25c9b73a9f244a7832fac44a5c135e9f411d0e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080526001805460ff60b01b191690553480156200002257600080fd5b506200002d62000033565b62000127565b6200004d6000801b336200008660201b62001e631760201c565b620000847f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95336200008660201b62001e631760201c565b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000123576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000e23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b608051613551620002006000396000818161048d015281816104d60152818161054601528181610586015281816106c3015281816107d40152818161093601528181610990015281816109ea01528181610a2a01528181610fd10152818161101101528181611129015281816111690152818161124001528181611280015281816113f4015281816114340152818161149b015281816114db01528181611a6e01528181611aae01528181611c0701528181611c4701528181611dbd01528181611dfd01528181612359015261239901526135516000f3fe60806040526004361061014b5760003560e01c80638777b393116100b6578063d320c77b1161006f578063d320c77b1461038a578063d547741f146103aa578063d55ec697146103ca578063f1a8341e146103df578063f776fc68146103f4578063f87422541461042857600080fd5b80638777b393146102e457806391d14854146102f9578063a217fddf14610319578063a8e5862d1461032e578063b21d1e5314610343578063cf8a11b91461037757600080fd5b806336568abe1161010857806336568abe146102525780633a7189211461027257806352d1902d1461028757806356f10b001461029c57806380cadf91146102af5780638129fc1c146102cf57600080fd5b806301ffc9a7146101505780630c3392b714610185578063248a9ca3146101b25780632d34ba79146101f05780632f2ff15d1461021257806331bd679f14610232575b600080fd5b34801561015c57600080fd5b5061017061016b366004612cae565b61044a565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b5061019a610481565b6040516001600160a01b03909116815260200161017c565b3480156101be57600080fd5b506101e26101cd366004612cd8565b60009081526020819052604090206001015490565b60405190815260200161017c565b3480156101fc57600080fd5b5061021061020b366004612d16565b61053c565b005b34801561021e57600080fd5b5061021061022d366004612d4f565b61068e565b34801561023e57600080fd5b5061021061024d366004612d74565b6106b8565b34801561025e57600080fd5b5061021061026d366004612d4f565b6108ab565b34801561027e57600080fd5b5061019a610929565b34801561029357600080fd5b506101e2610983565b6102106102aa366004612dd2565b6109e0565b3480156102bb57600080fd5b506102106102ca366004612e6e565b610fc7565b3480156102db57600080fd5b5061021061111f565b3480156102f057600080fd5b50610210611236565b34801561030557600080fd5b50610170610314366004612d4f565b6113bf565b34801561032557600080fd5b506101e2600081565b34801561033a57600080fd5b506101e26113e8565b34801561034f57600080fd5b506101e27f7db3a5ce85cf60bbe764132be0fbcb68292ae2471573882a46c8bcdaa1187b5781565b610210610385366004612dd2565b611491565b34801561039657600080fd5b506102106103a5366004612e6e565b611a64565b3480156103b657600080fd5b506102106103c5366004612d4f565b611b7c565b3480156103d657600080fd5b50610210611ba1565b3480156103eb57600080fd5b5061019a611db1565b34801561040057600080fd5b506101e27fa2d4613c2e2e0782566f63085acedcb19fbd37900464a8316040997ccd6e9fea81565b34801561043457600080fd5b506101e26000805160206134fc83398151915281565b60006001600160e01b03198216637965db0b60e01b148061047b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036104d45760405162461bcd60e51b81526004016104cb90612ec2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610506611ee7565b6001600160a01b03161461052c5760405162461bcd60e51b81526004016104cb90612f05565b506003546001600160a01b031690565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105845760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105b6611ee7565b6001600160a01b0316146105dc5760405162461bcd60e51b81526004016104cb90612f05565b60006105e781611f03565b600154600160b01b900460ff161561063a5760405162461bcd60e51b815260206004820152601660248201527505661756c7420697320616c72656164792073657475760541b60448201526064016104cb565b61064383611f0d565b61064c82611f0d565b506001805460ff60b01b1916600160b01b179055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b6000828152602081905260409020600101546106a981611f03565b6106b38383611e63565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107005760405162461bcd60e51b81526004016104cb90612f48565b6107186000805160206134fc833981519152336113bf565b61075c5760405162461bcd60e51b815260206004820152601560248201527421b0b63632b9103737ba1036b0b4b73a30b4b732b960591b60448201526064016104cb565b6001546001600160a01b0316156107bf5760405162461bcd60e51b815260206004820152602160248201527f6e657874496d706c656d656e746174696f6e20697320616c72656164792073656044820152601d60fa1b60648201526084016104cb565b6001600160a01b0381161580159061080957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b6108615760405162461bcd60e51b815260206004820152602360248201527f496e76616c6964206e657874496d706c656d656e746174696f6e20737570706c6044820152621a595960ea1b60648201526084016104cb565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fd29e16348a743868e0d8abbe198181558821118e9ffd596ad33d0e54899b6f0190600090a250565b6001600160a01b038116331461091b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104cb565b6109258282611f55565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109735760405162461bcd60e51b81526004016104cb90612f48565b506001546001600160a01b031690565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109cd5760405162461bcd60e51b81526004016104cb90612f48565b506000805160206134b583398151915290565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a285760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a5a611ee7565b6001600160a01b031614610a805760405162461bcd60e51b81526004016104cb90612f05565b6000339050610ac58186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fba92505050565b610b058184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fba92505050565b600086604051602001610b189190612ff9565b60408051601f198184030181526002546020601f8a01819004810285018101909352888452909350610b73926001600160a01b03909116918491908a908a908190840183828082843760009201919091525061202c92505050565b600354604080516020601f8701819004810282018101909252858152610bc0926001600160a01b031691849190889088908190840183828082843760009201919091525061202c92505050565b610bd1610bcc88613212565b6120e8565b86357fa2d4613c2e2e0782566f63085acedcb19fbd37900464a8316040997ccd6e9fea14610c325760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b60448201526064016104cb565b6001600160a01b038216610c4c6080890160608a01612d74565b6001600160a01b031614610c985760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2103232b9ba34b730ba34b7b760691b60448201526064016104cb565b610cd88287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122c792505050565b610d188285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122c792505050565b60005b610d2860808901896132a9565b9050811015610fbd576000610d4060808a018a6132a9565b83818110610d5057610d506132f2565b610d669260206040909202019081019150612d74565b90506000610d7760808b018b6132a9565b84818110610d8757610d876132f2565b90506040020160200135905060006001600160a01b0316826001600160a01b031603610df757803414610df25760405162461bcd60e51b8152602060048201526013602482015272496e636f7272656374206d73672e76616c756560681b60448201526064016104cb565b610ed0565b6001600160a01b0382166323b872dd610e1660808d0160608e01612d74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b50505050610e846122ff565b610ed05760405162461bcd60e51b815260206004820152601760248201527f436f756c64206e6f74206465706f73697420455243323000000000000000000060448201526064016104cb565b610ede600480546001019055565b610eeb60808b018b6132a9565b84818110610efb57610efb6132f2565b610f119260206040909202019081019150612d74565b6001600160a01b0316610f2a60808c0160608d01612d74565b6001600160a01b0316610f3c60045490565b7f22d2a1a57cfc2beb4f12eb1036a9e6a87b32b4256b040912b14e3f665d6deef5610f6a60808f018f6132a9565b88818110610f7a57610f7a6132f2565b905060400201602001358e60200135604051610fa0929190918252602082015260400190565b60405180910390a450508080610fb59061331e565b915050610d1b565b5050505050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361100f5760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611041611ee7565b6001600160a01b0316146110675760405162461bcd60e51b81526004016104cb90612f05565b600254604080516001600160a01b0386811660208301526110ca931691015b60408051601f198184030181526020601f87018190048102840181019092528583529190869086908190840183828082843760009201919091525061202c92505050565b6110d383611f0d565b600280546001600160a01b0319166001600160a01b0385169081179091556040517f480ae7e87535ab89d3903933ea168868a91e5290f9f0115a40cf0932870cd82d90600090a2505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111675760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611199611ee7565b6001600160a01b0316146111bf5760405162461bcd60e51b81526004016104cb90612f05565b600154600160a01b900460ff161561120f5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016104cb565b6001805461ffff60a01b191661010160a01b17905561122c61232c565b61123461234f565b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361127e5760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112b0611ee7565b6001600160a01b0316146112d65760405162461bcd60e51b81526004016104cb90612f05565b600154600160a81b900460ff16156113235760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481b5a59dc985d195960821b60448201526064016104cb565b6001805460ff60a81b1916600160a81b17905561133e61234f565b6000611348611ee7565b6001600160a01b0316633a7189216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190613337565b6001600160a01b03161461123457611234611ba1565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114325760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611464611ee7565b6001600160a01b03161461148a5760405162461bcd60e51b81526004016104cb90612f05565b5060045490565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114d95760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661150b611ee7565b6001600160a01b0316146115315760405162461bcd60e51b81526004016104cb90612f05565b60003390506115768186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fba92505050565b6115b68184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fba92505050565b6000866040516020016115c99190612ff9565b60408051601f198184030181526002546020601f8a01819004810285018101909352888452909350611624926001600160a01b03909116918491908a908a908190840183828082843760009201919091525061202c92505050565b600354604080516020601f8701819004810282018101909252858152611671926001600160a01b031691849190889088908190840183828082843760009201919091525061202c92505050565b61167d610bcc88613212565b86357f7db3a5ce85cf60bbe764132be0fbcb68292ae2471573882a46c8bcdaa1187b57146116de5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21030b1ba34b7b760911b60448201526064016104cb565b61171e8287878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122c792505050565b61175e8285858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122c792505050565b60005b61176e60808901896132a9565b9050811015610fbd57600061178660808a018a6132a9565b83818110611796576117966132f2565b6117ac9260206040909202019081019150612d74565b905060006117bd60808b018b6132a9565b848181106117cd576117cd6132f2565b90506040020160200135905060006001600160a01b0316826001600160a01b0316036118a457600061180560808c0160608d01612d74565b6001600160a01b03168260405160006040518083038185875af1925050503d806000811461184f576040519150601f19603f3d011682016040523d82523d6000602084013e611854565b606091505b505090508061189e5760405162461bcd60e51b8152602060048201526016602482015275086deead8c840dcdee840e8e4c2dce6cccae4408aa8960531b60448201526064016104cb565b50611977565b6001600160a01b03821663a9059cbb6118c360808d0160608e01612d74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561190b57600080fd5b505af115801561191f573d6000803e3d6000fd5b5050505061192b6122ff565b6119775760405162461bcd60e51b815260206004820152601860248201527f436f756c64206e6f74207472616e73666572204552433230000000000000000060448201526064016104cb565b611985600480546001019055565b61199260808b018b6132a9565b848181106119a2576119a26132f2565b6119b89260206040909202019081019150612d74565b6001600160a01b03166119d160808c0160608d01612d74565b6001600160a01b03166119e360045490565b7fd2b78ee4d7746a7014b79934b6d75a4b59c05550a8303c1d1b2f88940de4ec01611a1160808f018f6132a9565b88818110611a2157611a216132f2565b905060400201602001358e60200135604051611a47929190918252602082015260400190565b60405180910390a450508080611a5c9061331e565b915050611761565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611aac5760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611ade611ee7565b6001600160a01b031614611b045760405162461bcd60e51b81526004016104cb90612f05565b600354604080516001600160a01b038681166020830152611b2793169101611086565b611b3083611f0d565b600380546001600160a01b0319166001600160a01b0385169081179091556040517fd57bc400c1350cbcb94fbc677b99d85bf4e8becc2ac647472ab984234aab2d4c90600090a2505050565b600082815260208190526040902060010154611b9781611f03565b6106b38383611f55565b611bb96000805160206134fc833981519152336113bf565b611bfd5760405162461bcd60e51b815260206004820152601560248201527421b0b63632b9103737ba1036b0b4b73a30b4b732b960591b60448201526064016104cb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611c455760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c77611ee7565b6001600160a01b031614611c9d5760405162461bcd60e51b81526004016104cb90612f05565b6000611ca7611ee7565b6001600160a01b0316633a7189216040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d089190613337565b90506001600160a01b038116611d6c5760405162461bcd60e51b8152602060048201526024808201527f4e6f206e65787420696d706c656d656e746174696f6e20746f207570677261646044820152636520746f60e01b60648201526084016104cb565b6001805460ff60a81b191681556040805160048152602481019091526020810180516001600160e01b0316638777b39360e01b179052611dae918391906123ef565b50565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611dfb5760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611e2d611ee7565b6001600160a01b031614611e535760405162461bcd60e51b81526004016104cb90612f05565b506002546001600160a01b031690565b611e6d82826113bf565b610925576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611ea33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000805160206134b5833981519152546001600160a01b031690565b611dae813361255a565b6001600160a01b038116611dae5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016104cb565b611f5f82826113bf565b15610925576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382166000908152600560209081526040808320845185840120845290915290205460ff16156109255760405162461bcd60e51b815260206004820152601660248201527514da59db985d1d5c9948185b1c9958591e481d5cd95960521b60448201526064016104cb565b826001600160a01b031661209e8261209885805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906125be565b6001600160a01b0316146106b35760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016104cb565b4281604001516001600160401b0316116121365760405162461bcd60e51b815260206004820152600f60248201526e14995c5d595cdd08195e1c1a5c9959608a1b60448201526064016104cb565b60608101516001600160a01b03166121905760405162461bcd60e51b815260206004820152601b60248201527f44657374696e6174696f6e206973207a65726f2061646472657373000000000060448201526064016104cb565b60005b816080015151811015612214576000826080015182815181106121b8576121b86132f2565b602002602001015160200151116122025760405162461bcd60e51b815260206004820152600e60248201526d416d6f756e74206973207a65726f60901b60448201526064016104cb565b8061220c8161331e565b915050612193565b5061221d611ee7565b6001600160a01b03168160a001516001600160a01b0316146122815760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e2061646472657373000060448201526064016104cb565b468160c0015114611dae5760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818da185a5b881a5960821b60448201526064016104cb565b6001600160a01b039091166000908152600560209081526040808320845194830194909420835292905220805460ff19166001179055565b60003d8015612315576020811461231e57600080fd5b60001991505090565b60206000803e505060005190565b612337600033611e63565b6112346000805160206134fc83398151915233611e63565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036123975760405162461bcd60e51b81526004016104cb90612ec2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166123c9611ee7565b6001600160a01b0316146112345760405162461bcd60e51b81526004016104cb90612f05565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612422576106b3836125e2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561247c575060408051601f3d908101601f1916820190925261247991810190613354565b60015b6124df5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104cb565b6000805160206134b5833981519152811461254e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104cb565b506106b383838361267e565b61256482826113bf565b6109255761257c816001600160a01b031660146126a9565b6125878360206126a9565b604051602001612598929190613391565b60408051601f198184030181529082905262461bcd60e51b82526104cb91600401613406565b60008060006125cd858561284b565b915091506125da81612890565b509392505050565b6001600160a01b0381163b61264f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104cb565b6000805160206134b583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61268783612a46565b6000825111806126945750805b156106b3576126a38383612a86565b50505050565b606060006126b8836002613439565b6126c3906002613458565b6001600160401b038111156126da576126da6130d6565b6040519080825280601f01601f191660200182016040528015612704576020820181803683370190505b509050600360fc1b8160008151811061271f5761271f6132f2565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061274e5761274e6132f2565b60200101906001600160f81b031916908160001a9053506000612772846002613439565b61277d906001613458565b90505b60018111156127f5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127b1576127b16132f2565b1a60f81b8282815181106127c7576127c76132f2565b60200101906001600160f81b031916908160001a90535060049490941c936127ee8161346b565b9050612780565b5083156128445760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104cb565b9392505050565b60008082516041036128815760208301516040840151606085015160001a61287587828585612aab565b94509450505050612889565b506000905060025b9250929050565b60008160048111156128a4576128a4613482565b036128ac5750565b60018160048111156128c0576128c0613482565b0361290d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104cb565b600281600481111561292157612921613482565b0361296e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104cb565b600381600481111561298257612982613482565b036129da5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104cb565b60048160048111156129ee576129ee613482565b03611dae5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104cb565b612a4f816125e2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061284483836040518060600160405280602781526020016134d560279139612b98565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612ae25750600090506003612b8f565b8460ff16601b14158015612afa57508460ff16601c14155b15612b0b5750600090506004612b8f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b5f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b8857600060019250925050612b8f565b9150600090505b94509492505050565b60606001600160a01b0384163b612c005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104cb565b600080856001600160a01b031685604051612c1b9190613498565b600060405180830381855af49150503d8060008114612c56576040519150601f19603f3d011682016040523d82523d6000602084013e612c5b565b606091505b5091509150612c6b828286612c75565b9695505050505050565b60608315612c84575081612844565b825115612c945782518084602001fd5b8160405162461bcd60e51b81526004016104cb9190613406565b600060208284031215612cc057600080fd5b81356001600160e01b03198116811461284457600080fd5b600060208284031215612cea57600080fd5b5035919050565b6001600160a01b0381168114611dae57600080fd5b8035612d1181612cf1565b919050565b60008060408385031215612d2957600080fd5b8235612d3481612cf1565b91506020830135612d4481612cf1565b809150509250929050565b60008060408385031215612d6257600080fd5b823591506020830135612d4481612cf1565b600060208284031215612d8657600080fd5b813561284481612cf1565b60008083601f840112612da357600080fd5b5081356001600160401b03811115612dba57600080fd5b60208301915083602082850101111561288957600080fd5b600080600080600060608688031215612dea57600080fd5b85356001600160401b0380821115612e0157600080fd5b9087019060e0828a031215612e1557600080fd5b90955060208701359080821115612e2b57600080fd5b612e3789838a01612d91565b90965094506040880135915080821115612e5057600080fd5b50612e5d88828901612d91565b969995985093965092949392505050565b600080600060408486031215612e8357600080fd5b8335612e8e81612cf1565b925060208401356001600160401b03811115612ea957600080fd5b612eb586828701612d91565b9497909650939450505050565b60208082526023908201527f4d7573742062652063616c6c6564207468726f7567682064656c656761746563604082015262185b1b60ea1b606082015260800190565b60208082526023908201527f4d7573742062652063616c6c6564207468726f756768206163746976652070726040820152626f787960e81b606082015260800190565b60208082526027908201527f4d757374206e6f742062652063616c6c6564207468726f7567682064656c6567604082015266185d1958d85b1b60ca1b606082015260800190565b80356001600160401b0381168114612d1157600080fd5b8183526000602080850194508260005b85811015612fee578135612fc981612cf1565b6001600160a01b03168752818301358388015260409687019690910190600101612fb6565b509495945050505050565b602081528135602082015260208201356040820152600061301c60408401612f8f565b6001600160401b0380821660608501526060850135915061303c82612cf1565b60018060a01b038216608085015260808501359150601e1985360301821261306357600080fd5b602091850191820191358181111561307a57600080fd5b8060061b360383131561308c57600080fd5b60e060a08601526130a261010086018285612fa6565b925050506130b260a08501612d06565b6001600160a01b03811660c08501525060c084013560e08401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561310e5761310e6130d6565b60405290565b60405160e081016001600160401b038111828210171561310e5761310e6130d6565b604051601f8201601f191681016001600160401b038111828210171561315e5761315e6130d6565b604052919050565b600082601f83011261317757600080fd5b813560206001600160401b03821115613192576131926130d6565b6131a0818360051b01613136565b82815260069290921b840181019181810190868411156131bf57600080fd5b8286015b8481101561320757604081890312156131dc5760008081fd5b6131e46130ec565b81356131ef81612cf1565b815281850135858201528352918301916040016131c3565b509695505050505050565b600060e0823603121561322457600080fd5b61322c613114565b823581526020830135602082015261324660408401612f8f565b604082015261325760608401612d06565b606082015260808301356001600160401b0381111561327557600080fd5b61328136828601613166565b60808301525061329360a08401612d06565b60a082015260c092830135928101929092525090565b6000808335601e198436030181126132c057600080fd5b8301803591506001600160401b038211156132da57600080fd5b6020019150600681901b360382131561288957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161333057613330613308565b5060010190565b60006020828403121561334957600080fd5b815161284481612cf1565b60006020828403121561336657600080fd5b5051919050565b60005b83811015613388578181015183820152602001613370565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133c981601785016020880161336d565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516133fa81602884016020880161336d565b01602801949350505050565b602081526000825180602084015261342581604085016020870161336d565b601f01601f19169190910160400192915050565b600081600019048311821515161561345357613453613308565b500290565b8082018082111561047b5761047b613308565b60008161347a5761347a613308565b506000190190565b634e487b7160e01b600052602160045260246000fd5b600082516134aa81846020870161336d565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95a26469706673582212205a77756eb97b94d5937ab39760e2b4542ed66b7392ee9958d8b55573471424e264736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Implementation for the Proxy. Version 1.0.",
    "kind": "dev",
    "methods": {
      "applyUpgrade()": {
        "details": "Can only be called by Proxy."
      },
      "deposit((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)": {
        "details": "Deposit assets with given payload from the caller. Emits `Deposited` event.",
        "params": {
          "brokerSignature": "Payload signed by the broker.",
          "coSignerSignature": "Payload signed by the coSigner.",
          "payload": "Deposit payload."
        }
      },
      "getBrokerAddress()": {
        "details": "Get broker (only public key it is derived from exists) key for this vault.",
        "returns": {
          "_0": "address Broker (only public key it is derived from exists) key."
        }
      },
      "getCoSignerAddress()": {
        "details": "Get coSigner (only public key it is derived from exists) key for this vault.",
        "returns": {
          "_0": "address CoSigner (only public key it is derived from exists) key."
        }
      },
      "getLastId()": {
        "details": "Get last ledger id (deposits and withdrawals id).",
        "returns": {
          "_0": "uint256 Ledger id."
        }
      },
      "getNextImplementation()": {
        "details": "Must not be a delegated call.",
        "returns": {
          "_0": "VaultImplBase Next implementation contract address or zero address if not set yet."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize()": {
        "details": "Can only be called by Proxy."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBrokerAddress(address,bytes)": {
        "details": "Supplied payload must be signed by broker's current public key.",
        "params": {
          "address_": "New broker address.",
          "signature": "New address signed by broker's current public key."
        }
      },
      "setCoSignerAddress(address,bytes)": {
        "details": "Supplied payload must be signed by coSigner's current public key.",
        "params": {
          "address_": "New coSigner address.",
          "signature": "New address signed by coSigner's current public key."
        }
      },
      "setNextImplementation(address)": {
        "details": "Must not be a delegated call. Require caller to be Implementation Maintainer. Must not be zero address or self address. Emits `NextImplementationSet` event.",
        "params": {
          "nextImplementation": "Next implementation contract address."
        }
      },
      "setup(address,address)": {
        "details": "Require DEFAULT_ADMIN_ROLE to invoke. NOTE: once addresses are set, there is no way to change them if their private key is lost. In such case, vault implementation contract becomes useless and requires an upgrade.",
        "params": {
          "brokerAddress": "Address derived from broker public key.",
          "coSignerAddress": "Address derived from coSigner public key."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgrade()": {
        "details": "Require called to be Proxy Maintainer. Can only be called by Proxy."
      },
      "withdraw((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)": {
        "details": "Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event.",
        "params": {
          "brokerSignature": "Payload signed by the Broker.",
          "coSignerSignature": "Payload signed by the coSigner.",
          "payload": "Withdraw payload."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BrokerAddressSet(address)": {
        "notice": "Address derived from broker's new public key is set."
      },
      "CoSignerAddressSet(address)": {
        "notice": "Address derived from CoSigner's new public key is set."
      },
      "Deposited(uint256,address,address,uint256,bytes32)": {
        "notice": "Deposited event."
      },
      "Withdrawn(uint256,address,address,uint256,bytes32)": {
        "notice": "Withdrawn event."
      }
    },
    "kind": "user",
    "methods": {
      "DEPOSIT_ACTION()": {
        "notice": "Deposit type identifier value."
      },
      "WITHDRAW_ACTION()": {
        "notice": "Withdrawal type identifier value."
      },
      "applyUpgrade()": {
        "notice": "Call `_migrate` defined by the Implementation to migrate any storage variables. Call `upgrade` function on itself to ensure the this contract is the latest version."
      },
      "deposit((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)": {
        "notice": "Deposit assets with given payload from the caller. Emits `Deposited` event."
      },
      "getBrokerAddress()": {
        "notice": "Get broker (only public key it is derived from exists) key for this vault."
      },
      "getCoSignerAddress()": {
        "notice": "Get coSigner (only public key it is derived from exists) key for this vault."
      },
      "getLastId()": {
        "notice": "Get last ledger id (deposits and withdrawals id)."
      },
      "getNextImplementation()": {
        "notice": "Return next implementation contract address or zero address if not set yet. NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading."
      },
      "initialize()": {
        "notice": "Call `_initialize_ defined by the Implementation to initialize any storage variables."
      },
      "setBrokerAddress(address,bytes)": {
        "notice": "Set the address derived from the broker's new public key. Emits `BrokerAddressSet` event."
      },
      "setCoSignerAddress(address,bytes)": {
        "notice": "Set the address derived from the coSigner's new public key. Emits `CoSignerAddressSet` event."
      },
      "setNextImplementation(address)": {
        "notice": "Set next implementation contract address if not set yet. NextImplementation points to the next implementation contract in a chain of contracts to allow upgrading."
      },
      "setup(address,address)": {
        "notice": "The setup function sets addresses of the broker and coSigner."
      },
      "upgrade()": {
        "notice": "Perform an upgrade from the current implementation contract to a next one specified in a current Implementation. Also calls `applyUpgrade` on a next implementation."
      },
      "withdraw((bytes32,bytes32,uint64,address,(address,uint256)[],address,uint256),bytes,bytes)": {
        "notice": "Withdraw assets with given payload to the destination specified in the payload. Emits `Withdrawn` event."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2832,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "__nextImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VaultImplBase)3052"
      },
      {
        "astId": 2912,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "__initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2914,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "__migrated",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3087,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_isSetup",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3089,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_brokerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3091,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_coSignerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3094,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_ledgerId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)1794_storage"
      },
      {
        "astId": 3100,
        "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
        "label": "_sigUsage",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VaultImplBase)3052": {
        "encoding": "inplace",
        "label": "contract VaultImplBase",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(Counter)1794_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1793,
            "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/vault/VaultImplV1.sol:VaultImplV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
